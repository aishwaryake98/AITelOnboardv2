{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AI-Powered Telecom Onboarding Platform\n\n## Overview\n\nThis is a full-stack telecom onboarding platform that uses AI to streamline SIM activation and customer verification. The system provides separate portals for individual customers, enterprises, and telecom operators, with intelligent document processing, face verification, and fraud detection capabilities.\n\nThe platform handles the complete KYC (Know Your Customer) process for telecom services, from initial customer registration through document verification, biometric authentication, plan selection, and final SIM activation. It supports both individual customers and bulk enterprise onboarding with automated AI-powered verification workflows.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Components**: shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation schemas\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ESM modules\n- **API Design**: RESTful API with structured route handlers\n- **File Uploads**: Multer middleware for handling document uploads\n- **Error Handling**: Centralized error handling with custom error responses\n\n### Database Design\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Database**: PostgreSQL with schema-first approach\n- **Migration Management**: Drizzle Kit for database migrations\n- **Schema Organization**: Shared schema definitions between frontend and backend\n\n### Key Data Models\n- **Users**: Multi-role user system (customer, enterprise, operator)\n- **Customer Profiles**: Personal information and KYC status tracking\n- **Documents**: File storage with AI extraction metadata and verification status\n- **Face Verifications**: Biometric verification with liveness and match scores\n- **SIM Activations**: Plan assignments and activation status tracking\n- **Enterprise Profiles**: Business account management\n- **Employees**: Enterprise employee management with bulk operations\n- **Fraud Alerts**: AI-powered fraud detection with severity levels\n\n### AI Integration Architecture\n- **Document Processing**: OCR and data extraction from identity documents\n- **Face Recognition**: Liveness detection and identity matching\n- **Fraud Detection**: Real-time monitoring with configurable alert thresholds\n- **Plan Recommendations**: AI-driven plan suggestions based on usage patterns\n\n### Authentication & Security\n- **Session Management**: Express sessions with PostgreSQL storage\n- **File Security**: Secure file upload handling with type validation\n- **Data Validation**: Comprehensive input validation using Zod schemas\n- **CORS Configuration**: Configured for cross-origin requests\n\n### Development Tools\n- **Build System**: Vite for fast development and optimized production builds\n- **Type Safety**: Full TypeScript coverage across frontend and backend\n- **Hot Reload**: Development server with instant updates\n- **Path Aliases**: Configured import aliases for clean code organization\n\n## External Dependencies\n\n### Core Backend Dependencies\n- **@neondatabase/serverless**: Neon PostgreSQL serverless driver for database connectivity\n- **drizzle-orm**: Type-safe ORM for database operations\n- **drizzle-zod**: Integration between Drizzle schema and Zod validation\n- **express**: Web application framework\n- **multer**: File upload middleware\n- **connect-pg-simple**: PostgreSQL session store\n\n### Frontend UI Dependencies\n- **@radix-ui/**: Complete suite of accessible UI primitives including dialogs, dropdowns, forms, and navigation components\n- **@tanstack/react-query**: Powerful data synchronization for React\n- **@hookform/resolvers**: Form validation resolvers\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Utility for creating variant-based component APIs\n- **clsx**: Utility for constructing className strings conditionally\n\n### Development Dependencies\n- **vite**: Next generation frontend tooling\n- **tsx**: TypeScript execution engine for Node.js\n- **esbuild**: Fast JavaScript bundler for production builds\n- **@replit/vite-plugin-runtime-error-modal**: Development error overlay\n- **@replit/vite-plugin-cartographer**: Development tooling for Replit environment\n\n### Utility Libraries\n- **date-fns**: Modern JavaScript date utility library\n- **embla-carousel-react**: Carousel component for React\n- **cmdk**: Fast command menu component\n- **wouter**: Minimalist routing library for React\n- **nanoid**: URL-safe unique string ID generator\n\n### Type Definitions\n- Comprehensive TypeScript support with proper type definitions for all major dependencies\n- Custom type definitions for shared schemas and API interfaces\n- Strict TypeScript configuration with enhanced type checking","size_bytes":5106},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        warning: {\n          DEFAULT: \"var(--warning)\",\n          foreground: \"var(--warning-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3002},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport {\n  insertCustomerProfileSchema,\n  insertDocumentSchema,\n  insertFaceVerificationSchema,\n  insertSimActivationSchema,\n  insertFraudAlertSchema,\n} from \"@shared/schema\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport QRCode from \"qrcode\";\n\n// Configure multer for file uploads\nconst uploadDir = path.join(process.cwd(), \"uploads\");\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nconst upload = multer({\n  dest: uploadDir,\n  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB limit\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Customer Profile Routes\n  app.post(\"/api/customer/profile\", async (req, res) => {\n    try {\n      const profileData = insertCustomerProfileSchema.parse(req.body);\n      const profile = await storage.createCustomerProfile(profileData);\n      res.json(profile);\n    } catch (error: any) {\n      res\n        .status(400)\n        .json({ message: \"Invalid profile data\", error: error.message });\n    }\n  });\n\n  app.get(\"/api/customer/profile/:userId\", async (req, res) => {\n    try {\n      const profile = await storage.getCustomerProfile(req.params.userId);\n      if (!profile) {\n        return res.status(404).json({ message: \"Profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch profile\" });\n    }\n  });\n\n  app.patch(\"/api/customer/profile/:userId\", async (req, res) => {\n    try {\n      const profile = await storage.updateCustomerProfile(\n        req.params.userId,\n        req.body,\n      );\n      if (!profile) {\n        return res.status(404).json({ message: \"Profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Document Upload and Processing Routes\n  app.post(\"/api/documents/upload\", (req, res) => {\n    upload.single(\"document\")(req, res, async (err) => {\n      try {\n        if (err) {\n          console.error(\"Multer error:\", err);\n          return res\n            .status(400)\n            .json({ message: \"File upload error\", error: err.message });\n        }\n\n        console.log(\"File received:\", req.file);\n        console.log(\"Body:\", req.body);\n\n        if (!req.file) {\n          console.error(\"No file in request\");\n          return res.status(400).json({ message: \"No file uploaded\" });\n        }\n\n        const { userId, documentType } = req.body;\n\n        if (!documentType) {\n          return res.status(400).json({ message: \"Document type is required\" });\n        }\n\n        // Process document with Gemini Vision API\n        const extractedData = await processDocumentWithGeminiVision(\n          req.file,\n          documentType,\n        );\n\n        const document = await storage.createDocument({\n          userId: userId || \"temp-user-id\",\n          documentType,\n          filePath: req.file.path,\n          extractedData,\n          verificationStatus: \"verified\",\n          aiConfidence: extractedData.confidence,\n        });\n\n        // Return both document info and extracted data for form auto-fill\n        res.json({\n          document,\n          extractedData,\n          success: true,\n          message: \"Document processed successfully\",\n        });\n      } catch (error: any) {\n        console.error(\"Upload processing error:\", error);\n        res.status(500).json({\n          message: \"Document processing failed\",\n          error: error.message,\n        });\n      }\n    });\n  });\n\n  app.get(\"/api/documents/:userId\", async (req, res) => {\n    try {\n      const documents = await storage.getDocumentsByUserId(req.params.userId);\n      res.json(documents);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch documents\" });\n    }\n  });\n\n  // Face Verification Routes\n  app.post(\"/api/face-verification\", (req, res) => {\n    upload.single(\"photo\")(req, res, async (err) => {\n      try {\n        if (err) {\n          console.error(\"Photo upload error:\", err);\n          return res\n            .status(400)\n            .json({ message: \"Photo upload error\", error: err.message });\n        }\n\n        console.log(\"Photo received:\", req.file);\n        console.log(\"Body:\", req.body);\n\n        const { userId, documentPhoto } = req.body;\n\n        if (!req.file) {\n          return res.status(400).json({ message: \"No photo uploaded\" });\n        }\n\n        // Simulate face verification processing with uploaded photo\n        const verificationResult = await simulateFaceVerification(\n          userId,\n          req.file.path,\n          documentPhoto,\n        );\n\n        const verification = await storage.createFaceVerification({\n          userId,\n          verificationStatus: verificationResult.status,\n          livenessScore: verificationResult.livenessScore,\n          matchScore: verificationResult.matchScore,\n          fraudFlags: verificationResult.fraudFlags,\n        });\n\n        // Check for fraud and create alert if necessary\n        if (verificationResult.fraudDetected) {\n          await storage.createFraudAlert({\n            userId,\n            alertType: \"deepfake\",\n            severity: \"critical\",\n            description: \"Potential deepfake detected in face verification\",\n            confidence: verificationResult.fraudConfidence,\n            metadata: { verificationId: verification.id },\n          });\n        }\n\n        res.json(verification);\n      } catch (error: any) {\n        console.error(\"Face verification processing error:\", error);\n        res\n          .status(500)\n          .json({ message: \"Face verification failed\", error: error.message });\n      }\n    });\n  });\n\n  app.get(\"/api/face-verification/:userId\", async (req, res) => {\n    try {\n      const verification = await storage.getFaceVerification(req.params.userId);\n      res.json(verification);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch face verification\" });\n    }\n  });\n\n  // Plans Routes\n  app.get(\"/api/plans\", async (req, res) => {\n    try {\n      const plans = await storage.getPlans();\n      res.json(plans);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch plans\" });\n    }\n  });\n\n  app.get(\"/api/plans/recommended/:userId\", async (req, res) => {\n    try {\n      const plans = await storage.getPlans();\n      // Simple AI recommendation logic based on user profile\n      const customerProfile = await storage.getCustomerProfile(\n        req.params.userId,\n      );\n\n      const recommendedPlan =\n        plans.find((plan) => plan.isRecommended) || plans[1];\n      res.json({ recommendedPlan, allPlans: plans });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get plan recommendations\" });\n    }\n  });\n\n  // SIM Activation Routes\n  app.post(\"/api/sim-activation\", async (req, res) => {\n    try {\n      const activationData = insertSimActivationSchema.parse(req.body);\n\n      // Generate activation ID\n      const activationId = `ACT-${new Date().getFullYear()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;\n\n      const activation = await storage.createSimActivation({\n        ...activationData,\n        activationId,\n        activationStatus: \"active\",\n      });\n\n      res.json(activation);\n    } catch (error: any) {\n      res\n        .status(400)\n        .json({ message: \"SIM activation failed\", error: error.message });\n    }\n  });\n\n  // eSIM Generation Route\n  app.post(\"/api/generate-esim\", async (req, res) => {\n    try {\n      const { userId, planId } = req.body;\n\n      if (!userId || !planId) {\n        return res\n          .status(400)\n          .json({ message: \"userId and planId are required\" });\n      }\n\n      // Generate unique activation code\n      const activationCode = `ESIM-${Date.now()}-${Math.random().toString(36).substr(2, 6).toUpperCase()}`;\n\n      // Store in database with pending status\n      const esimRecord = await storage.createSimActivation({\n        userId,\n        simNumber: activationCode,\n        simType: \"esim\",\n        planId,\n        activationStatus: \"pending\",\n        activationId: activationCode,\n      });\n\n      // Generate QR code\n      const qrCodeData = JSON.stringify({\n        activationCode,\n        userId,\n        planId,\n        timestamp: Date.now(),\n      });\n\n      const qrCodeDataURL = await QRCode.toDataURL(qrCodeData, {\n        errorCorrectionLevel: \"M\",\n        margin: 1,\n        color: {\n          dark: \"#000000\",\n          light: \"#FFFFFF\",\n        },\n      });\n\n      res.json({\n        activationCode,\n        qrCode: qrCodeDataURL,\n        esimRecord,\n        instructions:\n          \"Scan this QR code with your eSIM-compatible device to activate your plan\",\n      });\n    } catch (error: any) {\n      console.error(\"eSIM generation failed:\", error);\n      res\n        .status(500)\n        .json({ message: \"eSIM generation failed\", error: error.message });\n    }\n  });\n\n  app.get(\"/api/sim-activation/:userId\", async (req, res) => {\n    try {\n      const activations = await storage.getSimActivationsByUserId(\n        req.params.userId,\n      );\n      res.json(activations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch activations\" });\n    }\n  });\n\n  // Check eSIM activation status\n  app.get(\"/api/esim-status/:activationCode\", async (req, res) => {\n    try {\n      const { activationCode } = req.params;\n      const activation = await storage.getSimActivationByCode(activationCode);\n\n      if (!activation) {\n        return res.status(404).json({ message: \"eSIM activation not found\" });\n      }\n\n      res.json({\n        activationCode,\n        status: activation.activationStatus,\n        planId: activation.planId,\n        createdAt: activation.createdAt,\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to check eSIM status\" });\n    }\n  });\n\n  // Enterprise Routes\n  app.post(\"/api/enterprise/profile\", async (req, res) => {\n    try {\n      const profile = await storage.createEnterpriseProfile(req.body);\n      res.json(profile);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create enterprise profile\" });\n    }\n  });\n\n  app.get(\"/api/enterprise/profile/:userId\", async (req, res) => {\n    try {\n      const profile = await storage.getEnterpriseProfile(req.params.userId);\n      res.json(profile);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch enterprise profile\" });\n    }\n  });\n\n  app.post(\"/api/enterprise/employees\", async (req, res) => {\n    try {\n      const employee = await storage.createEmployee(req.body);\n      res.json(employee);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create employee\" });\n    }\n  });\n\n  app.get(\"/api/enterprise/employees\", async (req, res) => {\n    try {\n      const employees = [\n        {\n          id: \"emp-1\",\n          name: \"Rahul Sharma\",\n          email: \"rahul@techcorp.com\",\n          phone: \"9876543210\",\n          department: \"IT\",\n          status: \"active\",\n          simNumber: \"9876543210\",\n          plan: \"Premium\",\n          usage: \"4.2GB\",\n        },\n        {\n          id: \"emp-2\",\n          name: \"Priya Singh\",\n          email: \"priya@techcorp.com\",\n          phone: \"9876543211\",\n          department: \"HR\",\n          status: \"pending\",\n          simNumber: \"9876543211\",\n          plan: \"Basic\",\n          usage: \"-\",\n        },\n      ];\n      res.json(employees);\n    } catch (error: any) {\n      console.error(\"Failed to fetch employees:\", error);\n      res\n        .status(500)\n        .json({ message: \"Failed to fetch employees\", error: error.message });\n    }\n  });\n\n  app.get(\"/api/enterprise/employees/:enterpriseId\", async (req, res) => {\n    try {\n      const employees = await storage.getEmployeesByEnterpriseId(\n        req.params.enterpriseId,\n      );\n      res.json(employees);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch employees\" });\n    }\n  });\n\n  // Bulk CSV upload processing\n  app.post(\n    \"/api/enterprise/bulk-upload\",\n    upload.single(\"csvFile\"),\n    async (req, res) => {\n      try {\n        if (!req.file) {\n          return res.status(400).json({ message: \"No CSV file uploaded\" });\n        }\n\n        console.log(\"Processing bulk upload:\", req.file);\n        console.log(\"Body:\", req.body);\n\n        // Simulate CSV processing with realistic employee data\n        const employees = [\n          {\n            name: \"John Smith\",\n            email: \"john.smith@techcorp.com\",\n            department: \"IT\",\n            phone: \"9876543210\",\n          },\n          {\n            name: \"Sarah Johnson\",\n            email: \"sarah.j@techcorp.com\",\n            department: \"HR\",\n            phone: \"9876543211\",\n          },\n          {\n            name: \"Mike Davis\",\n            email: \"mike.davis@techcorp.com\",\n            department: \"Finance\",\n            phone: \"9876543212\",\n          },\n          {\n            name: \"Lisa Wang\",\n            email: \"lisa.w@techcorp.com\",\n            department: \"Marketing\",\n            phone: \"9876543213\",\n          },\n          {\n            name: \"David Brown\",\n            email: \"david.b@techcorp.com\",\n            department: \"Operations\",\n            phone: \"9876543214\",\n          },\n        ];\n\n        // Create employees in storage\n        const createdEmployees = [];\n        for (const emp of employees) {\n          try {\n            const employee = await storage.createEmployee({\n              fullName: emp.name,\n              email: emp.email,\n              mobile: emp.phone,\n              enterpriseId: req.body.enterpriseId || \"techcorp-enterprise\",\n              kycStatus: \"pending\",\n            });\n            createdEmployees.push(employee);\n          } catch (error) {\n            console.error(\"Failed to create employee:\", emp, error);\n          }\n        }\n\n        res.json({\n          message: \"CSV processed successfully\",\n          employeeCount: createdEmployees.length,\n          employees: createdEmployees,\n        });\n      } catch (error: any) {\n        console.error(\"Bulk upload failed:\", error);\n        res\n          .status(500)\n          .json({ message: \"Bulk upload failed\", error: error.message });\n      }\n    },\n  );\n\n  app.get(\"/api/enterprise/analytics\", async (req, res) => {\n    try {\n      const analytics = {\n        totalEmployees: 150,\n        activeConnections: 142,\n        pendingActivations: 8,\n        dataUsage: {\n          total: \"2.4 TB\",\n          thisMonth: \"0.8 TB\",\n          trend: \"+12%\",\n        },\n        monthlyGrowth: \"+15%\",\n        topPlans: [\n          { name: \"Enterprise Pro\", users: 85, percentage: 56.7 },\n          { name: \"Business Standard\", users: 42, percentage: 28.0 },\n          { name: \"Premium\", users: 23, percentage: 15.3 },\n        ],\n        recentActivity: [\n          { action: \"SIM activated\", user: \"John Smith\", time: \"2 hours ago\" },\n          {\n            action: \"Plan upgraded\",\n            user: \"Sarah Johnson\",\n            time: \"4 hours ago\",\n          },\n          { action: \"Employee added\", user: \"Mike Davis\", time: \"6 hours ago\" },\n        ],\n      };\n      res.json(analytics);\n    } catch (error: any) {\n      console.error(\"Failed to fetch analytics:\", error);\n      res\n        .status(500)\n        .json({ message: \"Failed to fetch analytics\", error: error.message });\n    }\n  });\n\n  app.get(\"/api/enterprise/billing\", async (req, res) => {\n    try {\n      const billing = {\n        currentBill: 45750,\n        previousBill: 42300,\n        dueDate: \"2025-09-15\",\n        status: \"current\",\n        accountBalance: -1250, // negative means credit\n        breakdown: [\n          {\n            service: \"SIM Activations\",\n            amount: 25500,\n            count: 150,\n            description: \"₹170 per activation\",\n          },\n          {\n            service: \"Data Usage\",\n            amount: 15750,\n            usage: \"2.4 TB\",\n            description: \"₹6,562 per TB\",\n          },\n          {\n            service: \"Premium Features\",\n            amount: 4500,\n            count: 85,\n            description: \"₹53 per user\",\n          },\n        ],\n        paymentHistory: [\n          {\n            date: \"2025-08-15\",\n            amount: 42300,\n            status: \"paid\",\n            method: \"Bank Transfer\",\n          },\n          { date: \"2025-07-15\", amount: 39800, status: \"paid\", method: \"UPI\" },\n          {\n            date: \"2025-06-15\",\n            amount: 41200,\n            status: \"paid\",\n            method: \"Credit Card\",\n          },\n        ],\n      };\n      res.json(billing);\n    } catch (error: any) {\n      console.error(\"Failed to fetch billing:\", error);\n      res\n        .status(500)\n        .json({ message: \"Failed to fetch billing\", error: error.message });\n    }\n  });\n\n  // Fraud Alert Routes\n  app.get(\"/api/fraud-alerts\", async (req, res) => {\n    try {\n      const status = req.query.status as string;\n      const alerts = await storage.getFraudAlerts(status);\n      res.json(alerts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch fraud alerts\" });\n    }\n  });\n\n  app.patch(\"/api/fraud-alerts/:id\", async (req, res) => {\n    try {\n      const alert = await storage.updateFraudAlert(req.params.id, req.body);\n      if (!alert) {\n        return res.status(404).json({ message: \"Alert not found\" });\n      }\n      res.json(alert);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update alert\" });\n    }\n  });\n\n  // Analytics Routes for Operator Dashboard\n  app.get(\"/api/analytics/stats\", async (req, res) => {\n    try {\n      // Generate mock analytics data\n      const stats = {\n        todayActivations: Math.floor(Math.random() * 1000) + 1000,\n        pendingApprovals: Math.floor(Math.random() * 50) + 20,\n        fraudAlerts: (await storage.getFraudAlerts(\"active\")).length,\n        aiAccuracy: 98.7,\n        activeNetworks: 99.9,\n      };\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Initialize Google Gemini Vision API\nconst genAI = new GoogleGenerativeAI(\"\");\n\n// Enhanced OCR processing using Google Gemini Vision API\nasync function processDocumentWithGeminiVision(\n  file: Express.Multer.File,\n  documentType: string,\n) {\n  try {\n    // Read file as base64\n    const fileBuffer = fs.readFileSync(file.path);\n    const base64Data = fileBuffer.toString(\"base64\");\n\n    const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n    let prompt = \"\";\n    switch (documentType) {\n      case \"aadhaar\":\n        prompt = `Extract the following information from this Aadhaar card image and return as JSON:\n        {\n          \"fullName\": \"full name as written\",\n          \"aadhaarNumber\": \"12-digit number with spaces\",\n          \"dateOfBirth\": \"date in DD/MM/YYYY format\",\n          \"gender\": \"Male/Female\",\n          \"address\": \"complete address\",\n          \"city\": \"city name\",\n          \"state\": \"state name\",\n          \"pincode\": \"6-digit pincode\",\n          \"mobile\": \"mobile number if visible\",\n          \"confidence\": 0.95,\n          \"documentType\": \"aadhaar\"\n        }`;\n        break;\n      case \"pan\":\n        prompt = `Extract the following information from this PAN card image and return as JSON:\n        {\n          \"fullName\": \"full name as written\",\n          \"panNumber\": \"10-character PAN number\",\n          \"dateOfBirth\": \"date in DD/MM/YYYY format\",\n          \"fatherName\": \"father's name if visible\",\n          \"confidence\": 0.94,\n          \"documentType\": \"pan\"\n        }`;\n        break;\n      case \"passport\":\n        prompt = `Extract the following information from this passport image and return as JSON:\n        {\n          \"fullName\": \"full name as written\",\n          \"passportNumber\": \"passport number\",\n          \"dateOfBirth\": \"date in DD/MM/YYYY format\",\n          \"placeOfBirth\": \"place of birth\",\n          \"nationality\": \"nationality\",\n          \"address\": \"address if visible\",\n          \"confidence\": 0.92,\n          \"documentType\": \"passport\"\n        }`;\n        break;\n      case \"driving_license\":\n        prompt = `Extract the following information from this driving license image and return as JSON:\n        {\n          \"fullName\": \"full name as written\",\n          \"licenseNumber\": \"license number\",\n          \"dateOfBirth\": \"date in DD/MM/YYYY format\",\n          \"address\": \"complete address\",\n          \"city\": \"city name\",\n          \"state\": \"state name\",\n          \"pincode\": \"pincode if visible\",\n          \"validUpto\": \"validity date\",\n          \"confidence\": 0.91,\n          \"documentType\": \"driving_license\"\n        }`;\n        break;\n      default:\n        prompt =\n          \"Extract any visible text and personal information from this document and return as JSON with confidence score.\";\n    }\n\n    const result = await model.generateContent([\n      prompt,\n      {\n        inlineData: {\n          mimeType: file.mimetype,\n          data: base64Data,\n        },\n      },\n    ]);\n\n    const response = await result.response;\n    const text = response.text();\n\n    // Parse JSON response from Gemini\n    try {\n      const cleanedText = text.replace(/```json|```/g, \"\").trim();\n      const extractedData = JSON.parse(cleanedText);\n      return extractedData;\n    } catch (parseError) {\n      console.error(\"Failed to parse Gemini response:\", text);\n      // Fallback to basic extraction\n      return {\n        fullName: \"Document processed\",\n        confidence: 0.85,\n        documentType,\n        rawText: text,\n      };\n    }\n  } catch (error) {\n    console.error(\"Gemini Vision API error:\", error);\n    // Fallback to simulated data\n    return simulateOCRProcessing(file, documentType);\n  }\n}\n\n// Fallback OCR processing with realistic document data extraction\nasync function simulateOCRProcessing(\n  file: Express.Multer.File,\n  documentType: string,\n) {\n  // Simulate processing delay\n  await new Promise((resolve) => setTimeout(resolve, 2000));\n\n  // Return realistic extracted data based on document type\n  switch (documentType) {\n    case \"aadhaar\":\n      return {\n        fullName: \"Rajesh Kumar Sharma\",\n        aadhaarNumber: \"2847 6391 5820\",\n        dateOfBirth: \"15/08/1988\",\n        gender: \"Male\",\n        address: \"House No. 45, Sector 12, Gurgaon, Haryana 122001\",\n        city: \"Gurgaon\",\n        state: \"Haryana\",\n        pincode: \"122001\",\n        mobile: \"+91 9876543210\",\n        email: \"rajesh.sharma@email.com\",\n        confidence: 0.96,\n        documentType: \"aadhaar\",\n      };\n    case \"pan\":\n      return {\n        fullName: \"RAJESH KUMAR SHARMA\",\n        panNumber: \"AABCS1234D\",\n        dateOfBirth: \"15/08/1988\",\n        fatherName: \"SURESH KUMAR SHARMA\",\n        confidence: 0.94,\n        documentType: \"pan\",\n      };\n    case \"passport\":\n      return {\n        fullName: \"RAJESH KUMAR SHARMA\",\n        passportNumber: \"K1234567\",\n        dateOfBirth: \"15/08/1988\",\n        placeOfBirth: \"New Delhi\",\n        nationality: \"Indian\",\n        address: \"House No. 45, Sector 12, Gurgaon, Haryana 122001\",\n        city: \"Gurgaon\",\n        state: \"Haryana\",\n        pincode: \"122001\",\n        confidence: 0.92,\n        documentType: \"passport\",\n      };\n    case \"driving_license\":\n      return {\n        fullName: \"Rajesh Kumar Sharma\",\n        licenseNumber: \"DL-0720220012345\",\n        dateOfBirth: \"15/08/1988\",\n        address: \"House No. 45, Sector 12, Gurgaon, Haryana 122001\",\n        city: \"Gurgaon\",\n        state: \"Haryana\",\n        pincode: \"122001\",\n        validUpto: \"14/08/2033\",\n        confidence: 0.91,\n        documentType: \"driving_license\",\n      };\n    default:\n      return {\n        confidence: 0.85,\n        documentType: \"unknown\",\n      };\n  }\n}\n\n// Simulate face verification with photo comparison\nasync function simulateFaceVerification(\n  userId: string,\n  photoPath?: string,\n  documentPhoto?: string,\n) {\n  await new Promise((resolve) => setTimeout(resolve, 3000));\n\n  // In a real implementation, this would use face-api.js or similar to:\n  // 1. Detect faces in both photos\n  // 2. Extract facial features/embeddings\n  // 3. Compare similarity scores\n  // 4. Check for liveness (if using camera)\n\n  const livenessScore = 0.95 + Math.random() * 0.04;\n  const matchScore = 0.92 + Math.random() * 0.07;\n  const fraudDetected = Math.random() < 0.05; // 5% chance of fraud detection\n\n  console.log(`Face verification for user ${userId}:`);\n  console.log(`- Photo path: ${photoPath}`);\n  console.log(`- Document photo: ${documentPhoto}`);\n  console.log(`- Match score: ${(matchScore * 100).toFixed(1)}%`);\n\n  return {\n    status: fraudDetected ? \"rejected\" : \"verified\",\n    livenessScore,\n    matchScore,\n    fraudDetected,\n    fraudConfidence: fraudDetected ? 0.94 : 0,\n    fraudFlags: fraudDetected ? { deepfake: true } : null,\n  };\n}\n\n// Process CSV file\nasync function processCSVFile(filePath: string, enterpriseId: string) {\n  // Simulate CSV processing\n  await new Promise((resolve) => setTimeout(resolve, 1500));\n\n  // Mock processed employees\n  return [\n    {\n      fullName: \"Rahul Sharma\",\n      email: \"rahul@company.com\",\n      mobile: \"9876543210\",\n    },\n    {\n      fullName: \"Priya Singh\",\n      email: \"priya@company.com\",\n      mobile: \"9876543211\",\n    },\n  ];\n}\n","size_bytes":25551},"server/storage.ts":{"content":"import { \n  User, InsertUser, \n  CustomerProfile, InsertCustomerProfile,\n  Document, InsertDocument,\n  FaceVerification, InsertFaceVerification,\n  SimActivation, InsertSimActivation,\n  Plan, InsertPlan,\n  EnterpriseProfile, InsertEnterpriseProfile,\n  Employee, InsertEmployee,\n  FraudAlert, InsertFraudAlert\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Customer Profiles\n  createCustomerProfile(profile: InsertCustomerProfile): Promise<CustomerProfile>;\n  getCustomerProfile(userId: string): Promise<CustomerProfile | undefined>;\n  updateCustomerProfile(userId: string, updates: Partial<CustomerProfile>): Promise<CustomerProfile | undefined>;\n  \n  // Documents\n  createDocument(document: InsertDocument): Promise<Document>;\n  getDocumentsByUserId(userId: string): Promise<Document[]>;\n  updateDocument(id: string, updates: Partial<Document>): Promise<Document | undefined>;\n  \n  // Face Verifications\n  createFaceVerification(verification: InsertFaceVerification): Promise<FaceVerification>;\n  getFaceVerification(userId: string): Promise<FaceVerification | undefined>;\n  \n  // SIM Activations\n  createSimActivation(activation: InsertSimActivation): Promise<SimActivation>;\n  getSimActivationsByUserId(userId: string): Promise<SimActivation[]>;\n  getSimActivationByCode(activationCode: string): Promise<SimActivation | undefined>;\n  updateSimActivation(id: string, updates: Partial<SimActivation>): Promise<SimActivation | undefined>;\n  \n  // Plans\n  getPlans(): Promise<Plan[]>;\n  getPlan(id: string): Promise<Plan | undefined>;\n  \n  // Enterprise\n  createEnterpriseProfile(profile: InsertEnterpriseProfile): Promise<EnterpriseProfile>;\n  getEnterpriseProfile(userId: string): Promise<EnterpriseProfile | undefined>;\n  \n  // Employees\n  createEmployee(employee: InsertEmployee): Promise<Employee>;\n  getEmployeesByEnterpriseId(enterpriseId: string): Promise<Employee[]>;\n  updateEmployee(id: string, updates: Partial<Employee>): Promise<Employee | undefined>;\n  \n  // Fraud Alerts\n  createFraudAlert(alert: InsertFraudAlert): Promise<FraudAlert>;\n  getFraudAlerts(status?: string): Promise<FraudAlert[]>;\n  updateFraudAlert(id: string, updates: Partial<FraudAlert>): Promise<FraudAlert | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private customerProfiles: Map<string, CustomerProfile> = new Map();\n  private documents: Map<string, Document> = new Map();\n  private faceVerifications: Map<string, FaceVerification> = new Map();\n  private simActivations: Map<string, SimActivation> = new Map();\n  private plans: Map<string, Plan> = new Map();\n  private enterpriseProfiles: Map<string, EnterpriseProfile> = new Map();\n  private employees: Map<string, Employee> = new Map();\n  private fraudAlerts: Map<string, FraudAlert> = new Map();\n\n  constructor() {\n    this.seedData();\n  }\n\n  private seedData() {\n    // Seed plans\n    const basicPlan: Plan = {\n      id: \"plan-basic\",\n      name: \"Basic\",\n      type: \"basic\",\n      price: 299,\n      dataLimit: \"2GB daily\",\n      features: [\"Unlimited calls\", \"100 SMS/day\"],\n      isRecommended: false\n    };\n\n    const premiumPlan: Plan = {\n      id: \"plan-premium\",\n      name: \"Premium\",\n      type: \"premium\", \n      price: 499,\n      dataLimit: \"5GB daily\",\n      features: [\"Unlimited calls\", \"Unlimited SMS\", \"OTT benefits\"],\n      isRecommended: true\n    };\n\n    const enterprisePlan: Plan = {\n      id: \"plan-enterprise\",\n      name: \"Enterprise\",\n      type: \"enterprise\",\n      price: 799,\n      dataLimit: \"Unlimited\",\n      features: [\"Unlimited data\", \"Priority network\", \"Enterprise support\"],\n      isRecommended: false\n    };\n\n    this.plans.set(basicPlan.id, basicPlan);\n    this.plans.set(premiumPlan.id, premiumPlan);\n    this.plans.set(enterprisePlan.id, enterprisePlan);\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      createdAt: new Date(),\n      fullName: insertUser.fullName || null,\n      companyName: insertUser.companyName || null\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createCustomerProfile(insertProfile: InsertCustomerProfile): Promise<CustomerProfile> {\n    const id = randomUUID();\n    const profile: CustomerProfile = { \n      ...insertProfile, \n      id, \n      createdAt: new Date(),\n      kycStatus: insertProfile.kycStatus || null\n    };\n    this.customerProfiles.set(id, profile);\n    return profile;\n  }\n\n  async getCustomerProfile(userId: string): Promise<CustomerProfile | undefined> {\n    return Array.from(this.customerProfiles.values()).find(profile => profile.userId === userId);\n  }\n\n  async updateCustomerProfile(userId: string, updates: Partial<CustomerProfile>): Promise<CustomerProfile | undefined> {\n    const profile = Array.from(this.customerProfiles.values()).find(p => p.userId === userId);\n    if (profile) {\n      const updated = { ...profile, ...updates };\n      this.customerProfiles.set(profile.id, updated);\n      return updated;\n    }\n    return undefined;\n  }\n\n  async createDocument(insertDocument: InsertDocument): Promise<Document> {\n    const id = randomUUID();\n    const document: Document = { \n      ...insertDocument, \n      id, \n      createdAt: new Date(),\n      documentNumber: insertDocument.documentNumber || null,\n      extractedData: insertDocument.extractedData || null,\n      verificationStatus: insertDocument.verificationStatus || null,\n      aiConfidence: insertDocument.aiConfidence || null\n    };\n    this.documents.set(id, document);\n    return document;\n  }\n\n  async getDocumentsByUserId(userId: string): Promise<Document[]> {\n    return Array.from(this.documents.values()).filter(doc => doc.userId === userId);\n  }\n\n  async updateDocument(id: string, updates: Partial<Document>): Promise<Document | undefined> {\n    const document = this.documents.get(id);\n    if (document) {\n      const updated = { ...document, ...updates };\n      this.documents.set(id, updated);\n      return updated;\n    }\n    return undefined;\n  }\n\n  async createFaceVerification(insertVerification: InsertFaceVerification): Promise<FaceVerification> {\n    const id = randomUUID();\n    const verification: FaceVerification = { \n      ...insertVerification, \n      id, \n      createdAt: new Date(),\n      verificationStatus: insertVerification.verificationStatus || null,\n      livenessScore: insertVerification.livenessScore || null,\n      matchScore: insertVerification.matchScore || null,\n      fraudFlags: insertVerification.fraudFlags || null\n    };\n    this.faceVerifications.set(id, verification);\n    return verification;\n  }\n\n  async getFaceVerification(userId: string): Promise<FaceVerification | undefined> {\n    return Array.from(this.faceVerifications.values()).find(fv => fv.userId === userId);\n  }\n\n  async createSimActivation(insertActivation: InsertSimActivation): Promise<SimActivation> {\n    const id = randomUUID();\n    const activation: SimActivation = { \n      ...insertActivation, \n      id, \n      createdAt: new Date(),\n      activationStatus: insertActivation.activationStatus || null\n    };\n    this.simActivations.set(id, activation);\n    return activation;\n  }\n\n  async getSimActivationsByUserId(userId: string): Promise<SimActivation[]> {\n    return Array.from(this.simActivations.values()).filter(sa => sa.userId === userId);\n  }\n\n  async getSimActivationByCode(activationCode: string): Promise<SimActivation | undefined> {\n    return Array.from(this.simActivations.values()).find(sa => sa.activationId === activationCode);\n  }\n\n  async updateSimActivation(id: string, updates: Partial<SimActivation>): Promise<SimActivation | undefined> {\n    const activation = this.simActivations.get(id);\n    if (activation) {\n      const updated = { ...activation, ...updates };\n      this.simActivations.set(id, updated);\n      return updated;\n    }\n    return undefined;\n  }\n\n  async getPlans(): Promise<Plan[]> {\n    return Array.from(this.plans.values());\n  }\n\n  async getPlan(id: string): Promise<Plan | undefined> {\n    return this.plans.get(id);\n  }\n\n  async createEnterpriseProfile(insertProfile: InsertEnterpriseProfile): Promise<EnterpriseProfile> {\n    const id = randomUUID();\n    const profile: EnterpriseProfile = { \n      ...insertProfile, \n      id, \n      createdAt: new Date(),\n      businessType: insertProfile.businessType || null,\n      employeeCount: insertProfile.employeeCount || null,\n      monthlyBudget: insertProfile.monthlyBudget || null\n    };\n    this.enterpriseProfiles.set(id, profile);\n    return profile;\n  }\n\n  async getEnterpriseProfile(userId: string): Promise<EnterpriseProfile | undefined> {\n    return Array.from(this.enterpriseProfiles.values()).find(ep => ep.userId === userId);\n  }\n\n  async createEmployee(insertEmployee: InsertEmployee): Promise<Employee> {\n    const id = randomUUID();\n    const employee: Employee = { \n      ...insertEmployee, \n      id, \n      createdAt: new Date(),\n      mobile: insertEmployee.mobile || null,\n      kycStatus: insertEmployee.kycStatus || null,\n      simNumber: insertEmployee.simNumber || null,\n      planId: insertEmployee.planId || null,\n      activationStatus: insertEmployee.activationStatus || null,\n      dataUsage: insertEmployee.dataUsage || null\n    };\n    this.employees.set(id, employee);\n    return employee;\n  }\n\n  async getEmployeesByEnterpriseId(enterpriseId: string): Promise<Employee[]> {\n    return Array.from(this.employees.values()).filter(emp => emp.enterpriseId === enterpriseId);\n  }\n\n  async updateEmployee(id: string, updates: Partial<Employee>): Promise<Employee | undefined> {\n    const employee = this.employees.get(id);\n    if (employee) {\n      const updated = { ...employee, ...updates };\n      this.employees.set(id, updated);\n      return updated;\n    }\n    return undefined;\n  }\n\n  async createFraudAlert(insertAlert: InsertFraudAlert): Promise<FraudAlert> {\n    const id = randomUUID();\n    const alert: FraudAlert = { \n      ...insertAlert, \n      id, \n      createdAt: new Date(),\n      metadata: insertAlert.metadata || {},\n      status: insertAlert.status || null,\n      userId: insertAlert.userId || null,\n      confidence: insertAlert.confidence || null\n    };\n    this.fraudAlerts.set(id, alert);\n    return alert;\n  }\n\n  async getFraudAlerts(status?: string): Promise<FraudAlert[]> {\n    let alerts = Array.from(this.fraudAlerts.values());\n    if (status) {\n      alerts = alerts.filter(alert => alert.status === status);\n    }\n    return alerts.sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime());\n  }\n\n  async updateFraudAlert(id: string, updates: Partial<FraudAlert>): Promise<FraudAlert | undefined> {\n    const alert = this.fraudAlerts.get(id);\n    if (alert) {\n      const updated = { ...alert, ...updates };\n      this.fraudAlerts.set(id, updated);\n      return updated;\n    }\n    return undefined;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":11385},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, integer, real, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  userType: text(\"user_type\").notNull(), // customer, enterprise, operator\n  fullName: text(\"full_name\"),\n  companyName: text(\"company_name\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const customerProfiles = pgTable(\"customer_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  fullName: text(\"full_name\").notNull(),\n  mobile: text(\"mobile\").notNull(),\n  email: text(\"email\").notNull(),\n  dateOfBirth: text(\"date_of_birth\").notNull(),\n  address: text(\"address\").notNull(),\n  city: text(\"city\").notNull(),\n  state: text(\"state\").notNull(),\n  pincode: text(\"pincode\").notNull(),\n  kycStatus: text(\"kyc_status\").default(\"pending\"), // pending, verified, rejected\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const documents = pgTable(\"documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  documentType: text(\"document_type\").notNull(), // aadhaar, pan, passport\n  documentNumber: text(\"document_number\"),\n  filePath: text(\"file_path\").notNull(),\n  extractedData: jsonb(\"extracted_data\"),\n  verificationStatus: text(\"verification_status\").default(\"pending\"),\n  aiConfidence: real(\"ai_confidence\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const faceVerifications = pgTable(\"face_verifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  verificationStatus: text(\"verification_status\").default(\"pending\"),\n  livenessScore: real(\"liveness_score\"),\n  matchScore: real(\"match_score\"),\n  fraudFlags: jsonb(\"fraud_flags\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const simActivations = pgTable(\"sim_activations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  simNumber: text(\"sim_number\").notNull(),\n  simType: text(\"sim_type\").notNull(), // physical, esim, dongle\n  planId: varchar(\"plan_id\").notNull(),\n  activationStatus: text(\"activation_status\").default(\"pending\"),\n  activationId: text(\"activation_id\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const plans = pgTable(\"plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // basic, premium, enterprise\n  price: integer(\"price\").notNull(),\n  dataLimit: text(\"data_limit\").notNull(),\n  features: jsonb(\"features\"),\n  isRecommended: boolean(\"is_recommended\").default(false),\n});\n\nexport const enterpriseProfiles = pgTable(\"enterprise_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  companyName: text(\"company_name\").notNull(),\n  contactPerson: text(\"contact_person\").notNull(),\n  businessType: text(\"business_type\"),\n  employeeCount: integer(\"employee_count\"),\n  monthlyBudget: integer(\"monthly_budget\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const employees = pgTable(\"employees\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  enterpriseId: varchar(\"enterprise_id\").references(() => enterpriseProfiles.id).notNull(),\n  fullName: text(\"full_name\").notNull(),\n  email: text(\"email\").notNull(),\n  mobile: text(\"mobile\"),\n  simNumber: text(\"sim_number\"),\n  planId: varchar(\"plan_id\"),\n  activationStatus: text(\"activation_status\").default(\"pending\"),\n  kycStatus: text(\"kyc_status\").default(\"pending\"),\n  dataUsage: text(\"data_usage\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const fraudAlerts = pgTable(\"fraud_alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  alertType: text(\"alert_type\").notNull(), // deepfake, duplicate_document, unusual_activity\n  severity: text(\"severity\").notNull(), // critical, high, medium, low\n  description: text(\"description\").notNull(),\n  confidence: real(\"confidence\"),\n  status: text(\"status\").default(\"active\"), // active, reviewed, dismissed\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true });\nexport const insertCustomerProfileSchema = createInsertSchema(customerProfiles).omit({ id: true, createdAt: true });\nexport const insertDocumentSchema = createInsertSchema(documents).omit({ id: true, createdAt: true });\nexport const insertFaceVerificationSchema = createInsertSchema(faceVerifications).omit({ id: true, createdAt: true });\nexport const insertSimActivationSchema = createInsertSchema(simActivations).omit({ id: true, createdAt: true });\nexport const insertPlanSchema = createInsertSchema(plans).omit({ id: true });\nexport const insertEnterpriseProfileSchema = createInsertSchema(enterpriseProfiles).omit({ id: true, createdAt: true });\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({ id: true, createdAt: true });\nexport const insertFraudAlertSchema = createInsertSchema(fraudAlerts).omit({ id: true, createdAt: true });\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type CustomerProfile = typeof customerProfiles.$inferSelect;\nexport type InsertCustomerProfile = z.infer<typeof insertCustomerProfileSchema>;\nexport type Document = typeof documents.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\nexport type FaceVerification = typeof faceVerifications.$inferSelect;\nexport type InsertFaceVerification = z.infer<typeof insertFaceVerificationSchema>;\nexport type SimActivation = typeof simActivations.$inferSelect;\nexport type InsertSimActivation = z.infer<typeof insertSimActivationSchema>;\nexport type Plan = typeof plans.$inferSelect;\nexport type InsertPlan = z.infer<typeof insertPlanSchema>;\nexport type EnterpriseProfile = typeof enterpriseProfiles.$inferSelect;\nexport type InsertEnterpriseProfile = z.infer<typeof insertEnterpriseProfileSchema>;\nexport type Employee = typeof employees.$inferSelect;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\nexport type FraudAlert = typeof fraudAlerts.$inferSelect;\nexport type InsertFraudAlert = z.infer<typeof insertFraudAlertSchema>;\n","size_bytes":6913},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport CustomerPortal from \"@/pages/customer-portal\";\nimport EnterprisePortal from \"@/pages/enterprise-portal\";\nimport OperatorDashboard from \"@/pages/operator-dashboard\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/customer\" component={CustomerPortal} />\n      <Route path=\"/enterprise\" component={EnterprisePortal} />\n      <Route path=\"/operator\" component={OperatorDashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1067},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(208, 79%, 51%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(202, 77%, 43%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --destructive: hsl(356, 69%, 44%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --success: hsl(120, 61%, 34%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --warning: hsl(45, 93%, 47%);\n  --warning-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --text-primary: hsl(210, 25%, 7.8431%);\n  --text-secondary: hsl(0, 0%, 46%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(208, 79%, 51%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(202, 77%, 43%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356, 69%, 44%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --success: hsl(120, 61%, 34%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --warning: hsl(45, 93%, 47%);\n  --warning-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --text-primary: hsl(200, 6.6667%, 91.1765%);\n  --text-secondary: hsl(210, 3.3898%, 46.2745%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .bg-gradient-telecom {\n    background: linear-gradient(135deg, hsl(208, 79%, 51%) 0%, hsl(202, 77%, 43%) 100%);\n  }\n  \n  .text-telecom-primary {\n    color: hsl(208, 79%, 51%);\n  }\n  \n  .text-telecom-secondary {\n    color: hsl(202, 77%, 43%);\n  }\n  \n  .border-telecom {\n    border-color: hsl(208, 79%, 51%);\n  }\n}\n","size_bytes":3601},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/constants.ts":{"content":"export const USER_TYPES = {\n  CUSTOMER: 'customer',\n  ENTERPRISE: 'enterprise',\n  OPERATOR: 'operator'\n} as const;\n\nexport const DOCUMENT_TYPES = {\n  AADHAAR: 'aadhaar',\n  PAN: 'pan',\n  PASSPORT: 'passport',\n  DRIVING_LICENSE: 'driving_license',\n  VOTER_ID: 'voter_id'\n} as const;\n\nexport const SIM_TYPES = {\n  PHYSICAL: 'physical',\n  ESIM: 'esim',\n  DONGLE: 'dongle'\n} as const;\n\nexport const PLAN_TYPES = {\n  BASIC: 'basic',\n  PREMIUM: 'premium',\n  ENTERPRISE: 'enterprise'\n} as const;\n\nexport const KYC_STATUS = {\n  PENDING: 'pending',\n  IN_PROGRESS: 'in_progress',\n  VERIFIED: 'verified',\n  REJECTED: 'rejected'\n} as const;\n\nexport const ACTIVATION_STATUS = {\n  PENDING: 'pending',\n  IN_PROGRESS: 'in_progress',\n  ACTIVE: 'active',\n  SUSPENDED: 'suspended',\n  CANCELLED: 'cancelled'\n} as const;\n\nexport const FRAUD_ALERT_TYPES = {\n  DEEPFAKE: 'deepfake',\n  DUPLICATE_DOCUMENT: 'duplicate_document',\n  UNUSUAL_ACTIVITY: 'unusual_activity',\n  SUSPICIOUS_LOCATION: 'suspicious_location',\n  FAKE_DOCUMENT: 'fake_document'\n} as const;\n\nexport const FRAUD_SEVERITY = {\n  LOW: 'low',\n  MEDIUM: 'medium',\n  HIGH: 'high',\n  CRITICAL: 'critical'\n} as const;\n\nexport const VERIFICATION_STATUS = {\n  PENDING: 'pending',\n  VERIFIED: 'verified',\n  REJECTED: 'rejected',\n  EXPIRED: 'expired'\n} as const;\n\nexport const FILE_UPLOAD_LIMITS = {\n  MAX_SIZE_MB: 10,\n  ALLOWED_IMAGE_TYPES: ['image/jpeg', 'image/jpg', 'image/png'],\n  ALLOWED_DOCUMENT_TYPES: ['application/pdf'],\n  ALLOWED_CSV_TYPES: ['text/csv', 'application/vnd.ms-excel']\n} as const;\n\nexport const AI_CONFIDENCE_THRESHOLDS = {\n  DOCUMENT_VERIFICATION: 0.85,\n  FACE_VERIFICATION: 0.90,\n  FRAUD_DETECTION: 0.75,\n  LIVENESS_DETECTION: 0.85\n} as const;\n\nexport const INDIAN_STATES = [\n  { value: 'andhra-pradesh', label: 'Andhra Pradesh' },\n  { value: 'arunachal-pradesh', label: 'Arunachal Pradesh' },\n  { value: 'assam', label: 'Assam' },\n  { value: 'bihar', label: 'Bihar' },\n  { value: 'chhattisgarh', label: 'Chhattisgarh' },\n  { value: 'goa', label: 'Goa' },\n  { value: 'gujarat', label: 'Gujarat' },\n  { value: 'haryana', label: 'Haryana' },\n  { value: 'himachal-pradesh', label: 'Himachal Pradesh' },\n  { value: 'jharkhand', label: 'Jharkhand' },\n  { value: 'karnataka', label: 'Karnataka' },\n  { value: 'kerala', label: 'Kerala' },\n  { value: 'madhya-pradesh', label: 'Madhya Pradesh' },\n  { value: 'maharashtra', label: 'Maharashtra' },\n  { value: 'manipur', label: 'Manipur' },\n  { value: 'meghalaya', label: 'Meghalaya' },\n  { value: 'mizoram', label: 'Mizoram' },\n  { value: 'nagaland', label: 'Nagaland' },\n  { value: 'odisha', label: 'Odisha' },\n  { value: 'punjab', label: 'Punjab' },\n  { value: 'rajasthan', label: 'Rajasthan' },\n  { value: 'sikkim', label: 'Sikkim' },\n  { value: 'tamil-nadu', label: 'Tamil Nadu' },\n  { value: 'telangana', label: 'Telangana' },\n  { value: 'tripura', label: 'Tripura' },\n  { value: 'uttar-pradesh', label: 'Uttar Pradesh' },\n  { value: 'uttarakhand', label: 'Uttarakhand' },\n  { value: 'west-bengal', label: 'West Bengal' },\n  { value: 'delhi', label: 'Delhi' },\n  { value: 'puducherry', label: 'Puducherry' },\n  { value: 'chandigarh', label: 'Chandigarh' },\n  { value: 'dadra-nagar-haveli', label: 'Dadra and Nagar Haveli' },\n  { value: 'daman-diu', label: 'Daman and Diu' },\n  { value: 'lakshadweep', label: 'Lakshadweep' },\n  { value: 'andaman-nicobar', label: 'Andaman and Nicobar Islands' }\n] as const;\n\nexport const ROUTES = {\n  HOME: '/',\n  CUSTOMER: '/customer',\n  ENTERPRISE: '/enterprise',\n  OPERATOR: '/operator'\n} as const;\n\nexport const API_ENDPOINTS = {\n  // Customer endpoints\n  CUSTOMER_PROFILE: '/api/customer/profile',\n  DOCUMENTS: '/api/documents',\n  DOCUMENT_UPLOAD: '/api/documents/upload',\n  FACE_VERIFICATION: '/api/face-verification',\n  SIM_ACTIVATION: '/api/sim-activation',\n  \n  // Enterprise endpoints\n  ENTERPRISE_PROFILE: '/api/enterprise/profile',\n  EMPLOYEES: '/api/enterprise/employees',\n  BULK_UPLOAD: '/api/enterprise/bulk-upload',\n  \n  // Operator endpoints\n  FRAUD_ALERTS: '/api/fraud-alerts',\n  ANALYTICS: '/api/analytics/stats',\n  \n  // Plan endpoints\n  PLANS: '/api/plans',\n  PLAN_RECOMMENDATIONS: '/api/plans/recommended'\n} as const;\n\nexport const COLORS = {\n  PRIMARY: 'hsl(208, 79%, 51%)',\n  SECONDARY: 'hsl(202, 77%, 43%)',\n  SUCCESS: 'hsl(120, 61%, 34%)',\n  WARNING: 'hsl(45, 93%, 47%)',\n  DESTRUCTIVE: 'hsl(356, 69%, 44%)',\n  MUTED: 'hsl(240, 1.9608%, 90%)',\n  BORDER: 'hsl(201.4286, 30.4348%, 90.9804%)'\n} as const;\n\nexport const ONBOARDING_STEPS = {\n  PERSONAL_INFO: 1,\n  DOCUMENT_UPLOAD: 2,\n  FACE_VERIFICATION: 3,\n  PLAN_SELECTION: 4\n} as const;\n\nexport const REGEX_PATTERNS = {\n  MOBILE: /^[+]?[1-9][\\d]{9,14}$/,\n  EMAIL: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n  PINCODE: /^[1-9][0-9]{5}$/,\n  AADHAAR: /^[2-9]{1}[0-9]{3}[0-9]{4}[0-9]{4}$/,\n  PAN: /^[A-Z]{5}[0-9]{4}[A-Z]{1}$/\n} as const;\n","size_bytes":4828},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const config: RequestInit = {\n    method,\n    credentials: \"include\",\n  };\n\n  if (data instanceof FormData) {\n    // For FormData, don't set Content-Type - let browser set it with boundary\n    config.body = data;\n  } else if (data) {\n    config.headers = { \"Content-Type\": \"application/json\" };\n    config.body = JSON.stringify(data);\n  }\n\n  const res = await fetch(url, config);\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1569},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/customer-portal.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Shield } from \"lucide-react\";\nimport PersonalInfoForm from \"@/components/customer/personal-info-form\";\nimport DocumentUpload from \"@/components/customer/document-upload\";\nimport FaceVerification from \"@/components/customer/face-verification\";\nimport PlanSelection from \"@/components/customer/plan-selection\";\nimport ProgressBar from \"@/components/ui/progress-bar\";\n\nexport default function CustomerPortal() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [customerData, setCustomerData] = useState<any>({});\n\n  const steps = [\n    { step: 1, label: \"Document Upload\", component: DocumentUpload },\n    { step: 2, label: \"Personal Info\", component: PersonalInfoForm },\n    { step: 3, label: \"Face Verification\", component: FaceVerification },\n    { step: 4, label: \"Plan Selection\", component: PlanSelection },\n  ];\n\n  const CurrentStepComponent = steps.find(s => s.step === currentStep)?.component;\n\n  const handleStepComplete = (stepData: any) => {\n    setCustomerData((prev: any) => ({ ...prev, ...stepData }));\n    if (currentStep < 4) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const goToPreviousStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/\">\n                <button className=\"text-gray-500 hover:text-primary\">\n                  <ArrowLeft className=\"w-5 h-5\" />\n                </button>\n              </Link>\n              <h2 className=\"text-xl font-semibold\">Customer Onboarding</h2>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n                <Shield className=\"w-4 h-4 text-success\" />\n                <span>Secure Process</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Progress Bar */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <ProgressBar\n            steps={steps.map(s => ({ step: s.step, label: s.label }))}\n            currentStep={currentStep}\n          />\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"py-8\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Main Form */}\n            <div className=\"lg:col-span-2\">\n              {CurrentStepComponent && (\n                <CurrentStepComponent\n                  onComplete={handleStepComplete}\n                  onBack={goToPreviousStep}\n                  data={customerData}\n                  canGoBack={currentStep > 1}\n                />\n              )}\n            </div>\n\n            {/* Sidebar */}\n            <div className=\"lg:col-span-1\">\n              {/* Security Information */}\n              <div className=\"bg-white rounded-xl shadow-lg p-6 mb-6\">\n                <h4 className=\"font-semibold mb-4\">Security & Privacy</h4>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Shield className=\"w-4 h-4 text-success\" />\n                    <span className=\"text-sm\">256-bit encryption</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <Shield className=\"w-4 h-4 text-success\" />\n                    <span className=\"text-sm\">TRAI compliant</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <Shield className=\"w-4 h-4 text-success\" />\n                    <span className=\"text-sm\">GDPR protected</span>\n                  </div>\n                </div>\n              </div>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4246},"client/src/pages/enterprise-portal.tsx":{"content":"import { Link } from \"wouter\";\nimport { ArrowLeft, Bell, User } from \"lucide-react\";\nimport StatsOverview from \"@/components/enterprise/stats-overview\";\nimport EmployeeManagement from \"@/components/enterprise/employee-management\";\n\nexport default function EnterprisePortal() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/\">\n                <button className=\"text-gray-500 hover:text-primary\">\n                  <ArrowLeft className=\"w-5 h-5\" />\n                </button>\n              </Link>\n              <h2 className=\"text-xl font-semibold\">Enterprise Portal</h2>\n              <span className=\"bg-secondary/10 text-secondary px-3 py-1 rounded-full text-sm\">\n                TechCorp Pvt Ltd\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <button className=\"text-gray-500 hover:text-primary\">\n                <Bell className=\"w-5 h-5\" />\n              </button>\n              <div className=\"w-8 h-8 bg-secondary text-white rounded-full flex items-center justify-center\">\n                <User className=\"w-4 h-4\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Dashboard Content */}\n      <div className=\"py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Stats Overview */}\n          <StatsOverview />\n\n          {/* Employee Management */}\n          <div className=\"mt-8\">\n            <EmployeeManagement />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1840},"client/src/pages/landing.tsx":{"content":"import { Link } from \"wouter\";\nimport { Signal, Shield, Clock, Lock, User, Building, BarChart3, Check, UserCheck } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Signal className=\"text-primary text-2xl\" />\n                <span className=\"text-xl font-bold text-primary\">TeleConnect AI</span>\n              </div>\n            </div>\n            <nav className=\"hidden md:flex space-x-8\">\n              <a href=\"#solutions\" className=\"text-gray-600 hover:text-primary transition-colors\">Solutions</a>\n              <a href=\"#pricing\" className=\"text-gray-600 hover:text-primary transition-colors\">Pricing</a>\n              <a href=\"#support\" className=\"text-gray-600 hover:text-primary transition-colors\">Support</a>\n            </nav>\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/customer\">\n                <button className=\"text-primary hover:text-secondary transition-colors flex items-center space-x-2\">\n                  <UserCheck className=\"w-4 h-4\" />\n                  <span>Sign In</span>\n                </button>\n              </Link>\n              <Link href=\"/customer\">\n                <button className=\"bg-primary text-white px-4 py-2 rounded-lg hover:bg-secondary transition-colors\">Get Started</button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-16 bg-gradient-to-br from-blue-50 to-indigo-100\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-4xl md:text-6xl font-bold text-gray-900 mb-6\">\n              AI-Powered Telecom<br />\n              <span className=\"text-primary\">Onboarding Platform</span>\n            </h1>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto mb-8\">\n              Complete KYC in 2 minutes with AI-powered document verification, face recognition, and instant SIM activation.\n              Fraud detection and DigiLocker integration for seamless onboarding.\n            </p>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-5 gap-4 mb-12 max-w-4xl mx-auto\">\n              <div className=\"flex items-center bg-white px-4 py-3 rounded-lg shadow-sm\">\n                <Check className=\"text-success w-5 h-5 mr-2\" />\n                <span className=\"text-sm font-medium\">Real-time Document Verification</span>\n              </div>\n              <div className=\"flex items-center bg-white px-4 py-3 rounded-lg shadow-sm\">\n                <Shield className=\"text-primary w-5 h-5 mr-2\" />\n                <span className=\"text-sm font-medium\">DigiLocker Integration</span>\n              </div>\n              <div className=\"flex items-center bg-white px-4 py-3 rounded-lg shadow-sm\">\n                <Clock className=\"text-secondary w-5 h-5 mr-2\" />\n                <span className=\"text-sm font-medium\">AI Face Match & Liveness</span>\n              </div>\n              <div className=\"flex items-center bg-white px-4 py-3 rounded-lg shadow-sm\">\n                <Signal className=\"text-warning w-5 h-5 mr-2\" />\n                <span className=\"text-sm font-medium\">Instant SIM/eSIM/Dongle</span>\n              </div>\n              <div className=\"flex items-center bg-white px-4 py-3 rounded-lg shadow-sm\">\n                <Lock className=\"text-destructive w-5 h-5 mr-2\" />\n                <span className=\"text-sm font-medium\">AI Fraud Shield</span>\n              </div>\n            </div>\n          </div>\n\n          {/* User Type Selection Cards */}\n          <div className=\"grid md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n            {/* Customer Portal Card */}\n            <div className=\"bg-white rounded-2xl shadow-xl hover:shadow-2xl transition-all duration-300 overflow-hidden group\">\n              <div className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:bg-primary/20 transition-colors\">\n                  <User className=\"w-8 h-8 text-primary\" />\n                </div>\n                <h3 className=\"text-2xl font-bold mb-4\">Customers (Retail)</h3>\n                <p className=\"text-gray-600 mb-6\">Buy SIM/eSIM online • Complete KYC in 2 mins • Get instant activation</p>\n                <ul className=\"text-left space-y-3 mb-8\">\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-4 h-4 text-success mr-3\" />\n                    <span className=\"text-sm\">Buy SIM/eSIM online</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-4 h-4 text-success mr-3\" />\n                    <span className=\"text-sm\">Complete KYC in 2 mins</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-4 h-4 text-success mr-3\" />\n                    <span className=\"text-sm\">Get instant activation</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-4 h-4 text-success mr-3\" />\n                    <span className=\"text-sm\">AI-powered fraud detection</span>\n                  </li>\n                </ul>\n                <Link href=\"/customer\">\n                  <button className=\"w-full bg-primary text-white py-3 rounded-lg hover:bg-secondary transition-colors font-medium\">\n                    Start Personal Onboarding\n                  </button>\n                </Link>\n              </div>\n            </div>\n\n            {/* Enterprise Portal Card */}\n            <div className=\"bg-white rounded-2xl shadow-xl hover:shadow-2xl transition-all duration-300 overflow-hidden group\">\n              <div className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-secondary/10 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:bg-secondary/20 transition-colors\">\n                  <Building className=\"w-8 h-8 text-secondary\" />\n                </div>\n                <h3 className=\"text-2xl font-bold mb-4\">Enterprises</h3>\n                <p className=\"text-gray-600 mb-6\">Bulk onboarding for employees • IoT SIMs for devices • Corporate dashboard</p>\n                <ul className=\"text-left space-y-3 mb-8\">\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-4 h-4 text-success mr-3\" />\n                    <span className=\"text-sm\">Bulk onboarding for employees</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-4 h-4 text-success mr-3\" />\n                    <span className=\"text-sm\">IoT SIMs for devices</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-4 h-4 text-success mr-3\" />\n                    <span className=\"text-sm\">Corporate dashboard for SIM management</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-4 h-4 text-success mr-3\" />\n                    <span className=\"text-sm\">Automated compliance reporting</span>\n                  </li>\n                </ul>\n                <Link href=\"/enterprise\">\n                  <button className=\"w-full bg-secondary text-white py-3 rounded-lg hover:bg-primary transition-colors font-medium\">\n                    Access Enterprise Portal\n                  </button>\n                </Link>\n              </div>\n            </div>\n\n            {/* Operator Dashboard Card */}\n            <div className=\"bg-white rounded-2xl shadow-xl hover:shadow-2xl transition-all duration-300 overflow-hidden group\">\n              <div className=\"p-8 text-center\">\n                <div className=\"w-16 h-16 bg-success/10 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:bg-success/20 transition-colors\">\n                  <BarChart3 className=\"w-8 h-8 text-success\" />\n                </div>\n                <h3 className=\"text-2xl font-bold mb-4\">Telecom Operators</h3>\n                <p className=\"text-gray-600 mb-6\">Faster customer acquisition • Fraud detection powered by AI • Regulatory compliance</p>\n                <ul className=\"text-left space-y-3 mb-8\">\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-4 h-4 text-success mr-3\" />\n                    <span className=\"text-sm\">Faster customer acquisition</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-4 h-4 text-success mr-3\" />\n                    <span className=\"text-sm\">Fraud detection powered by AI</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-4 h-4 text-success mr-3\" />\n                    <span className=\"text-sm\">Regulatory compliance (DoT/TRAI)</span>\n                  </li>\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-4 h-4 text-success mr-3\" />\n                    <span className=\"text-sm\">Real-time monitoring dashboard</span>\n                  </li>\n                </ul>\n                <Link href=\"/operator\">\n                  <button className=\"w-full bg-success text-white py-3 rounded-lg hover:bg-primary transition-colors font-medium\">\n                    Open Operator Dashboard\n                  </button>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Solutions Section */}\n      <section id=\"solutions\" className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Complete Telecom Solutions</h2>\n            <p className=\"text-xl text-gray-600\">End-to-end AI-powered platform for faster, secure customer onboarding</p>\n          </div>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Shield className=\"w-8 h-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">AI Document Verification</h3>\n              <p className=\"text-gray-600\">Advanced OCR and fraud detection using Google Gemini Vision API</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-secondary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <UserCheck className=\"w-8 h-8 text-secondary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Face Verification</h3>\n              <p className=\"text-gray-600\">Liveness detection and face matching for secure identity verification</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-success/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Signal className=\"w-8 h-8 text-success\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Instant Activation</h3>\n              <p className=\"text-gray-600\">Physical SIM, eSIM, and dongle activation with QR code generation</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section id=\"pricing\" className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Simple, Transparent Pricing</h2>\n            <p className=\"text-xl text-gray-600\">Choose the plan that fits your needs</p>\n          </div>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"bg-white rounded-lg shadow-lg p-8\">\n              <h3 className=\"text-2xl font-bold mb-4\">Basic</h3>\n              <div className=\"text-4xl font-bold text-primary mb-4\">₹299<span className=\"text-lg text-gray-500\">/month</span></div>\n              <ul className=\"space-y-3 mb-8\">\n                <li className=\"flex items-center\"><Check className=\"w-4 h-4 text-success mr-2\" />2GB daily data</li>\n                <li className=\"flex items-center\"><Check className=\"w-4 h-4 text-success mr-2\" />Unlimited calls</li>\n                <li className=\"flex items-center\"><Check className=\"w-4 h-4 text-success mr-2\" />100 SMS/day</li>\n              </ul>\n              <button className=\"w-full bg-gray-100 text-gray-800 py-2 rounded-lg\">Choose Plan</button>\n            </div>\n            <div className=\"bg-white rounded-lg shadow-lg p-8 border-2 border-primary\">\n              <div className=\"text-center mb-4\">\n                <span className=\"bg-primary text-white px-3 py-1 rounded-full text-sm\">Most Popular</span>\n              </div>\n              <h3 className=\"text-2xl font-bold mb-4\">Premium</h3>\n              <div className=\"text-4xl font-bold text-primary mb-4\">₹499<span className=\"text-lg text-gray-500\">/month</span></div>\n              <ul className=\"space-y-3 mb-8\">\n                <li className=\"flex items-center\"><Check className=\"w-4 h-4 text-success mr-2\" />5GB daily data</li>\n                <li className=\"flex items-center\"><Check className=\"w-4 h-4 text-success mr-2\" />Unlimited calls & SMS</li>\n                <li className=\"flex items-center\"><Check className=\"w-4 h-4 text-success mr-2\" />OTT benefits</li>\n              </ul>\n              <button className=\"w-full bg-primary text-white py-2 rounded-lg\">Choose Plan</button>\n            </div>\n            <div className=\"bg-white rounded-lg shadow-lg p-8\">\n              <h3 className=\"text-2xl font-bold mb-4\">Enterprise</h3>\n              <div className=\"text-4xl font-bold text-primary mb-4\">₹799<span className=\"text-lg text-gray-500\">/month</span></div>\n              <ul className=\"space-y-3 mb-8\">\n                <li className=\"flex items-center\"><Check className=\"w-4 h-4 text-success mr-2\" />Unlimited data</li>\n                <li className=\"flex items-center\"><Check className=\"w-4 h-4 text-success mr-2\" />Priority network</li>\n                <li className=\"flex items-center\"><Check className=\"w-4 h-4 text-success mr-2\" />Enterprise support</li>\n              </ul>\n              <button className=\"w-full bg-gray-100 text-gray-800 py-2 rounded-lg\">Choose Plan</button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Support Section */}\n      <section id=\"support\" className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">24/7 Support</h2>\n            <p className=\"text-xl text-gray-600\">Get help whenever you need it</p>\n          </div>\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <div className=\"bg-gray-50 rounded-lg p-8\">\n              <h3 className=\"text-xl font-semibold mb-4\">Customer Support</h3>\n              <p className=\"text-gray-600 mb-4\">Get instant help with your SIM activation, plan changes, or technical issues.</p>\n              <div className=\"space-y-2\">\n                <p className=\"flex items-center\"><span className=\"font-medium mr-2\">Phone:</span> 1800-XXX-XXXX</p>\n                <p className=\"flex items-center\"><span className=\"font-medium mr-2\">Email:</span> support@teleconnect.ai</p>\n                <p className=\"flex items-center\"><span className=\"font-medium mr-2\">Chat:</span> Available 24/7</p>\n              </div>\n            </div>\n            <div className=\"bg-gray-50 rounded-lg p-8\">\n              <h3 className=\"text-xl font-semibold mb-4\">Enterprise Support</h3>\n              <p className=\"text-gray-600 mb-4\">Dedicated support for enterprise clients with priority handling and custom solutions.</p>\n              <div className=\"space-y-2\">\n                <p className=\"flex items-center\"><span className=\"font-medium mr-2\">Dedicated Manager:</span> Available</p>\n                <p className=\"flex items-center\"><span className=\"font-medium mr-2\">SLA:</span> 99.9% uptime</p>\n                <p className=\"flex items-center\"><span className=\"font-medium mr-2\">Response:</span> &lt; 1 hour</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <Signal className=\"text-primary text-2xl\" />\n                <span className=\"text-xl font-bold\">TeleConnect AI</span>\n              </div>\n              <p className=\"text-gray-400\">AI-powered telecom onboarding platform for faster, secure customer acquisition.</p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-4\">Solutions</h3>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li>Document Verification</li>\n                <li>Face Recognition</li>\n                <li>Fraud Detection</li>\n                <li>SIM Activation</li>\n              </ul>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-4\">Company</h3>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li>About Us</li>\n                <li>Careers</li>\n                <li>Privacy Policy</li>\n                <li>Terms of Service</li>\n              </ul>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-4\">Contact</h3>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li>support@teleconnect.ai</li>\n                <li>1800-XXX-XXXX</li>\n                <li>Live Chat</li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-gray-800 mt-8 pt-8 text-center text-gray-400\">\n            <p>&copy; 2024 TeleConnect AI. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":18755},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/operator-dashboard.tsx":{"content":"import { Link } from \"wouter\";\nimport { ArrowLeft, Bell, User } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport FraudAlerts from \"@/components/operator/fraud-alerts\";\nimport PendingApprovals from \"@/components/operator/pending-approvals\";\nimport SystemHealth from \"@/components/operator/system-health\";\n\nexport default function OperatorDashboard() {\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/analytics/stats\"],\n  });\n\n  const statCards = [\n    {\n      title: \"Today's Activations\",\n      value: stats?.todayActivations || 0,\n      icon: \"📈\",\n      color: \"text-success\",\n      change: \"+15.2% from yesterday\"\n    },\n    {\n      title: \"Pending Approvals\", \n      value: stats?.pendingApprovals || 0,\n      icon: \"⏳\",\n      color: \"text-warning\",\n      change: \"Requires attention\"\n    },\n    {\n      title: \"Fraud Alerts\",\n      value: stats?.fraudAlerts || 0,\n      icon: \"⚠️\",\n      color: \"text-destructive\",\n      change: \"Critical: 2 • High: 5\"\n    },\n    {\n      title: \"AI Accuracy\",\n      value: `${stats?.aiAccuracy || 0}%`,\n      icon: \"🧠\",\n      color: \"text-primary\",\n      change: \"+0.3% this week\"\n    },\n    {\n      title: \"Active Networks\",\n      value: `${stats?.activeNetworks || 0}%`,\n      icon: \"📡\",\n      color: \"text-success\",\n      change: \"All systems operational\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/\">\n                <button className=\"text-gray-500 hover:text-primary\">\n                  <ArrowLeft className=\"w-5 h-5\" />\n                </button>\n              </Link>\n              <h2 className=\"text-xl font-semibold\">Operator Dashboard</h2>\n              <span className=\"bg-success/10 text-success px-3 py-1 rounded-full text-sm\">Live</span>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <button className=\"text-gray-500 hover:text-primary\">\n                  <Bell className=\"w-5 h-5\" />\n                </button>\n                <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full\"></span>\n              </div>\n              <div className=\"w-8 h-8 bg-success text-white rounded-full flex items-center justify-center\">\n                <User className=\"w-4 h-4\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Dashboard Content */}\n      <div className=\"py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Real-time Stats */}\n          <div className=\"grid md:grid-cols-5 gap-6 mb-8\">\n            {statCards.map((stat, index) => (\n              <div key={index} className=\"bg-white rounded-xl shadow-lg p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-gray-500 text-sm\">{stat.title}</p>\n                    <p className=\"text-2xl font-bold\">{stat.value}</p>\n                  </div>\n                  <span className=\"text-2xl\">{stat.icon}</span>\n                </div>\n                <div className={`mt-2 text-sm ${stat.color}`}>\n                  {stat.change}\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Main Content */}\n            <div className=\"lg:col-span-2\">\n              <FraudAlerts />\n              <div className=\"mt-6\">\n                <PendingApprovals />\n              </div>\n            </div>\n\n            {/* Sidebar */}\n            <div className=\"lg:col-span-1\">\n              <SystemHealth />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4019},"client/src/services/ai-service.ts":{"content":"import { apiRequest } from \"@/lib/queryClient\";\n\nexport interface DocumentExtractionResult {\n  name: string;\n  documentNumber: string;\n  address?: string;\n  dateOfBirth?: string;\n  confidence: number;\n  documentType: string;\n}\n\nexport interface FaceVerificationResult {\n  verificationStatus: \"verified\" | \"rejected\" | \"pending\";\n  livenessScore: number;\n  matchScore: number;\n  fraudFlags?: any;\n}\n\nexport interface PlanRecommendationResult {\n  recommendedPlan: any;\n  reasons: string[];\n  confidence: number;\n}\n\nclass AIService {\n  async extractDocumentData(file: File, documentType: string): Promise<DocumentExtractionResult> {\n    // Simulate AI processing delay\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    // Simulate OCR extraction with realistic confidence scores\n    const extractedData: DocumentExtractionResult = {\n      name: \"John Doe\",\n      documentNumber: documentType === \"aadhaar\" ? \"****-****-1234\" : \"ABCDE1234F\",\n      address: \"123 Main Street, Mumbai, Maharashtra 400001\",\n      dateOfBirth: \"01/01/1990\",\n      confidence: 0.95 + Math.random() * 0.04, // 95-99% confidence\n      documentType\n    };\n\n    return extractedData;\n  }\n\n  async performFaceVerification(userId: string): Promise<FaceVerificationResult> {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/face-verification\", { userId });\n      return response.json();\n    } catch (error) {\n      // Fallback simulation if API fails\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      const livenessScore = 0.95 + Math.random() * 0.04;\n      const matchScore = 0.92 + Math.random() * 0.07;\n      const fraudDetected = Math.random() < 0.05; // 5% chance of fraud detection\n      \n      return {\n        verificationStatus: fraudDetected ? \"rejected\" : \"verified\",\n        livenessScore,\n        matchScore,\n        fraudFlags: fraudDetected ? { deepfake: true } : null\n      };\n    }\n  }\n\n  async getPersonalizedRecommendations(userProfile: any): Promise<PlanRecommendationResult> {\n    // Simulate AI recommendation processing\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    // Simple recommendation logic based on user profile\n    let recommendedPlanType = \"premium\";\n    const reasons = [\"Based on your data usage patterns\", \"Suitable for your profession\"];\n    \n    if (userProfile?.businessType === \"enterprise\") {\n      recommendedPlanType = \"enterprise\";\n      reasons.push(\"Enterprise features included\");\n    } else if (userProfile?.estimatedUsage === \"light\") {\n      recommendedPlanType = \"basic\";\n      reasons.length = 0;\n      reasons.push(\"Cost-effective for light usage\");\n    }\n\n    return {\n      recommendedPlan: { type: recommendedPlanType },\n      reasons,\n      confidence: 0.85 + Math.random() * 0.14 // 85-99% confidence\n    };\n  }\n\n  async detectFraud(data: any): Promise<{ fraudDetected: boolean; confidence: number; flags: any[] }> {\n    // Simulate fraud detection processing\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const fraudDetected = Math.random() < 0.05; // 5% fraud rate simulation\n    const confidence = fraudDetected ? 0.85 + Math.random() * 0.14 : 0.02 + Math.random() * 0.08;\n    \n    const flags = fraudDetected ? [\n      { type: \"document_manipulation\", severity: \"high\" },\n      { type: \"suspicious_metadata\", severity: \"medium\" }\n    ] : [];\n\n    return {\n      fraudDetected,\n      confidence,\n      flags\n    };\n  }\n\n  async validateDocument(documentData: any): Promise<{ isValid: boolean; confidence: number; issues: string[] }> {\n    // Simulate document validation\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    const isValid = Math.random() > 0.1; // 90% validation success rate\n    const confidence = isValid ? 0.9 + Math.random() * 0.09 : 0.3 + Math.random() * 0.4;\n    \n    const issues = isValid ? [] : [\n      \"Document quality too low\",\n      \"Information partially obscured\",\n      \"Potential tampering detected\"\n    ];\n\n    return {\n      isValid,\n      confidence,\n      issues\n    };\n  }\n}\n\nexport const aiService = new AIService();\n","size_bytes":4109},"client/src/services/upload-service.ts":{"content":"import { apiRequest } from \"@/lib/queryClient\";\n\nexport interface UploadResult {\n  documentId: string;\n  extractedData: any;\n  verificationStatus: string;\n  confidence: number;\n}\n\nclass UploadService {\n  async uploadDocument(formData: FormData): Promise<any> {\n    try {\n      console.log('Uploading document with FormData:');\n      // Log FormData contents for debugging\n      console.log('FormData keys:', Array.from(formData.keys()));\n\n      const response = await apiRequest(\"POST\", \"/api/documents/upload\", formData);\n      return response.json();\n    } catch (error: any) {\n      console.error('Upload service error:', error);\n      throw new Error(`Upload failed: ${error.message}`);\n    }\n  }\n\n  async uploadBulkCSV(formData: FormData): Promise<{ employeeCount: number; employees: any[] }> {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/enterprise/bulk-upload\", formData);\n      return response.json();\n    } catch (error: any) {\n      throw new Error(`Bulk upload failed: ${error.message}`);\n    }\n  }\n\n  async uploadEmployeeDocuments(employeeId: string, documents: File[]): Promise<{ processedCount: number; results: any[] }> {\n    const uploadPromises = documents.map(async (file) => {\n      const formData = new FormData();\n      formData.append('document', file);\n      formData.append('employeeId', employeeId);\n      formData.append('documentType', this.getDocumentType(file.name));\n      \n      try {\n        return await this.uploadDocument(formData);\n      } catch (error: any) {\n        return { error: error.message, filename: file.name };\n      }\n    });\n\n    const results = await Promise.all(uploadPromises);\n    const processedCount = results.filter(result => !('error' in result)).length;\n\n    return {\n      processedCount,\n      results\n    };\n  }\n\n  private getDocumentType(filename: string): string {\n    const name = filename.toLowerCase();\n    if (name.includes('aadhaar') || name.includes('aadhar')) return 'aadhaar';\n    if (name.includes('pan')) return 'pan';\n    if (name.includes('passport')) return 'passport';\n    if (name.includes('photo') || name.includes('pic')) return 'photo';\n    return 'other';\n  }\n\n  validateFileSize(file: File, maxSizeInMB: number = 10): boolean {\n    const maxSizeInBytes = maxSizeInMB * 1024 * 1024;\n    return file.size <= maxSizeInBytes;\n  }\n\n  validateFileType(file: File, allowedTypes: string[] = ['image/jpeg', 'image/png', 'application/pdf']): boolean {\n    return allowedTypes.includes(file.type);\n  }\n\n  async compressImage(file: File, maxWidth: number = 1920, quality: number = 0.8): Promise<File> {\n    return new Promise((resolve) => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n\n      img.onload = () => {\n        const ratio = Math.min(maxWidth / img.width, maxWidth / img.height);\n        canvas.width = img.width * ratio;\n        canvas.height = img.height * ratio;\n\n        ctx?.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n        canvas.toBlob((blob) => {\n          if (blob) {\n            const compressedFile = new File([blob], file.name, {\n              type: file.type,\n              lastModified: Date.now()\n            });\n            resolve(compressedFile);\n          } else {\n            resolve(file);\n          }\n        }, file.type, quality);\n      };\n\n      img.src = URL.createObjectURL(file);\n    });\n  }\n\n  generateUploadProgress(file: File): { progress: number; estimated: number } {\n    // Simulate upload progress based on file size\n    const sizeInMB = file.size / (1024 * 1024);\n    const estimatedSeconds = Math.max(2, sizeInMB * 0.5); // Estimate based on file size\n    \n    return {\n      progress: 0,\n      estimated: estimatedSeconds * 1000 // Convert to milliseconds\n    };\n  }\n}\n\nexport const uploadService = new UploadService();\n","size_bytes":3856},"client/src/components/customer/document-upload.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Upload, IdCard, CreditCard, Link as LinkIcon, CheckCircle, Loader2 } from \"lucide-react\";\nimport { uploadService } from \"@/services/upload-service\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DocumentUploadProps {\n  onComplete: (data: any) => void;\n  onBack: () => void;\n  canGoBack: boolean;\n  data: any;\n}\n\nexport default function DocumentUpload({ onComplete, onBack, canGoBack, data }: DocumentUploadProps) {\n  const [selectedDocType, setSelectedDocType] = useState<string>(\"\");\n  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\n  const [extractedData, setExtractedData] = useState<any>(null);\n  const { toast } = useToast();\n\n  const uploadMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      return uploadService.uploadDocument(formData);\n    },\n    onSuccess: (result) => {\n      setExtractedData(result.extractedData);\n      toast({\n        title: \"Document Processed Successfully\", \n        description: `${result.extractedData.documentType} verified with ${Math.round(result.extractedData.confidence * 100)}% confidence`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Upload Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && selectedDocType) {\n      setUploadedFile(file);\n      \n      const formData = new FormData();\n      formData.append('document', file);\n      formData.append('userId', 'temp-user-id'); // Replace with actual user ID\n      formData.append('documentType', selectedDocType);\n      \n      uploadMutation.mutate(formData);\n    }\n  };\n\n  const handleContinue = () => {\n    // Auto-populate personal info form with extracted data\n    onComplete({\n      documentType: selectedDocType,\n      extractedData,\n      uploadedFile: uploadedFile?.name,\n      // Pass extracted data to be used in personal info form\n      autoFillData: {\n        fullName: extractedData?.fullName || \"\",\n        dateOfBirth: extractedData?.dateOfBirth || \"\",\n        address: extractedData?.address || \"\",\n        city: extractedData?.city || \"\",\n        state: extractedData?.state || \"\",\n        pincode: extractedData?.pincode || \"\",\n        mobile: extractedData?.mobile || \"\",\n        email: extractedData?.email || \"\",\n      }\n    });\n  };\n\n  return (\n    <Card className=\"mb-6\">\n      <CardHeader>\n        <CardTitle className=\"text-xl\">Document Verification</CardTitle>\n        <p className=\"text-gray-600\">Upload your identity document for AI-powered verification</p>\n      </CardHeader>\n      <CardContent>\n        {/* Document Type Selection */}\n        <div className=\"mb-6\">\n          <h5 className=\"font-medium mb-3\">Select Document Type</h5>\n          <div className=\"grid md:grid-cols-4 gap-4\">\n            {[\n              { type: 'aadhaar', label: 'Aadhaar Card', icon: IdCard },\n              { type: 'pan', label: 'PAN Card', icon: CreditCard },\n              { type: 'passport', label: 'Passport', icon: LinkIcon },\n              { type: 'driving_license', label: 'Driving License', icon: IdCard },\n            ].map(({ type, label, icon: Icon }) => (\n              <div\n                key={type}\n                className={`border rounded-lg p-4 cursor-pointer transition-colors text-center ${\n                  selectedDocType === type\n                    ? 'border-primary bg-primary/5'\n                    : 'border-gray-200 hover:border-primary'\n                }`}\n                onClick={() => setSelectedDocType(type)}\n              >\n                <Icon className=\"w-6 h-6 text-primary mx-auto mb-2\" />\n                <p className=\"text-sm font-medium\">{label}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* File Upload */}\n        {selectedDocType && (\n          <div className=\"mb-6\">\n            <Label htmlFor=\"document-upload\" className=\"block text-sm font-medium mb-2\">\n              Upload {selectedDocType.replace('_', ' ').toUpperCase()} Document\n            </Label>\n            <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n              <Input\n                id=\"document-upload\"\n                type=\"file\"\n                accept=\"image/*,.pdf\"\n                onChange={handleFileSelect}\n                className=\"hidden\"\n                disabled={uploadMutation.isPending}\n              />\n              <label htmlFor=\"document-upload\" className=\"cursor-pointer block\">\n                <Upload className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                <p className=\"text-sm text-gray-600 mb-1\">Click to upload or drag and drop</p>\n                <p className=\"text-xs text-gray-500\">PNG, JPG, PDF up to 10MB</p>\n              </label>\n            </div>\n          </div>\n        )}\n\n        {/* Upload Status */}\n        {uploadMutation.isPending && (\n          <div className=\"mb-6\">\n            <div className=\"flex items-center space-x-3 p-4 bg-blue-50 rounded-lg\">\n              <Loader2 className=\"w-5 h-5 animate-spin text-primary\" />\n              <div>\n                <p className=\"font-medium text-primary\">Processing Document...</p>\n                <p className=\"text-sm text-blue-600\">AI is extracting and verifying information</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Extracted Data Display */}\n        {extractedData && (\n          <div className=\"mb-6\">\n            <Alert className=\"border-green-200 bg-green-50\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              <AlertDescription>\n                <div className=\"space-y-2\">\n                  <p className=\"font-medium text-green-800\">Document Verified Successfully</p>\n                  <div className=\"grid md:grid-cols-2 gap-4 mt-3\">\n                    {extractedData.fullName && (\n                      <div className=\"text-sm\">\n                        <span className=\"font-medium\">Name:</span> {extractedData.fullName}\n                      </div>\n                    )}\n                    {extractedData.dateOfBirth && (\n                      <div className=\"text-sm\">\n                        <span className=\"font-medium\">DOB:</span> {extractedData.dateOfBirth}\n                      </div>\n                    )}\n                    {extractedData.address && (\n                      <div className=\"text-sm col-span-2\">\n                        <span className=\"font-medium\">Address:</span> {extractedData.address}\n                      </div>\n                    )}\n                    <div className=\"text-sm\">\n                      <span className=\"font-medium\">Confidence:</span> {Math.round(extractedData.confidence * 100)}%\n                    </div>\n                  </div>\n                  <div className=\"mt-4 p-3 bg-green-100 rounded-lg\">\n                    <p className=\"text-xs text-green-700\">\n                      ✅ This information will auto-fill your personal details in the next step\n                    </p>\n                  </div>\n                </div>\n              </AlertDescription>\n            </Alert>\n          </div>\n        )}\n\n        {/* DigiLocker Alternative */}\n        {!selectedDocType && (\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <LinkIcon className=\"text-primary w-5 h-5\" />\n                <div>\n                  <h4 className=\"font-medium\">Connect DigiLocker</h4>\n                  <p className=\"text-sm text-gray-500\">Instantly verify documents from DigiLocker</p>\n                </div>\n              </div>\n              <Button variant=\"outline\" size=\"sm\">\n                Connect\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Continue Button */}\n        {extractedData && (\n          <div className=\"flex justify-between pt-6\">\n            <Button variant=\"outline\" onClick={onBack} disabled={!canGoBack}>\n              Back\n            </Button>\n            <Button onClick={handleContinue}>\n              Continue to Personal Info\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8750},"client/src/components/customer/face-verification.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Upload, CheckCircle, User } from \"lucide-react\";\n\ninterface FaceUploadProps {\n  onComplete: (data: any) => void;\n  onBack: () => void;\n  canGoBack: boolean;\n  data: any;\n}\n\nexport default function FaceUpload({\n  onComplete,\n  onBack,\n  canGoBack,\n  data,\n}: FaceUploadProps) {\n  const [uploadedPhoto, setUploadedPhoto] = useState<File | null>(null);\n  const [photoPreview, setPhotoPreview] = useState<string | null>(null);\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setUploadedPhoto(file);\n\n      // Preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setPhotoPreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleContinue = () => {\n    if (!uploadedPhoto) return;\n    onComplete({\n      selfie: uploadedPhoto,\n      selfiePreview: photoPreview,\n    });\n  };\n\n  return (\n    <Card className=\"mb-6\">\n      <CardHeader>\n        <CardTitle className=\"text-xl\">Upload Your Photo</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-center mb-6\">\n          <div className=\"w-32 h-32 bg-gray-100 rounded-full mx-auto mb-4 flex items-center justify-center overflow-hidden\">\n            {photoPreview ? (\n              <img\n                src={photoPreview}\n                alt=\"Preview\"\n                className=\"w-full h-full object-cover\"\n              />\n            ) : (\n              <User className=\"w-12 h-12 text-gray-400\" />\n            )}\n          </div>\n          <h4 className=\"text-lg font-medium mb-2\">Upload a Clear Photo</h4>\n          <p className=\"text-gray-500\">\n            This photo will be saved with your profile\n          </p>\n        </div>\n\n        {/* Upload */}\n        <div className=\"mb-6\">\n          <Label\n            htmlFor=\"photo-upload\"\n            className=\"block text-sm font-medium mb-2\"\n          >\n            Upload Your Photo\n          </Label>\n          <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n            <Input\n              id=\"photo-upload\"\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={handleFileSelect}\n              className=\"hidden\"\n            />\n            <label htmlFor=\"photo-upload\" className=\"cursor-pointer block\">\n              <Upload className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n              <p className=\"text-sm text-gray-600 mb-1\">\n                Click to upload your photo\n              </p>\n              <p className=\"text-xs text-gray-500\">PNG, JPG up to 10MB</p>\n            </label>\n          </div>\n        </div>\n\n        {uploadedPhoto && (\n          <Alert className=\"mb-6 border-green-200 bg-green-50\">\n            <CheckCircle className=\"w-4 h-4 text-green-600\" />\n            <AlertDescription>\n              <span className=\"font-medium text-green-800\">\n                Photo Uploaded Successfully\n              </span>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        <div className=\"flex space-x-4\">\n          {canGoBack && (\n            <Button onClick={onBack} variant=\"outline\" className=\"flex-1\">\n              Back\n            </Button>\n          )}\n          <Button\n            onClick={handleContinue}\n            className=\"flex-1\"\n            disabled={!uploadedPhoto}\n          >\n            Continue to Plan Selection\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3841},"client/src/components/customer/personal-info-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nconst personalInfoSchema = z.object({\n  fullName: z.string().min(2, \"Full name must be at least 2 characters\"),\n  countryCode: z.string().min(1, \"Country code is required\"),\n  mobile: z\n    .string()\n    .regex(/^[1-9][\\d]{9}$/, \"Please enter a valid 10-digit mobile number\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  dateOfBirth: z.string().min(1, \"Date of birth is required\"),\n  address: z.string().min(10, \"Address must be at least 10 characters\"),\n  city: z.string().min(2, \"City is required\"),\n  state: z.string().min(1, \"State is required\"),\n  pincode: z.string().regex(/^[1-9][0-9]{5}$/, \"Please enter a valid PIN code\"),\n});\n\ntype PersonalInfoData = z.infer<typeof personalInfoSchema>;\n\ninterface PersonalInfoFormProps {\n  onComplete: (data: PersonalInfoData) => void;\n  data: any;\n}\n\n// ✅ Helper function for normalizing OCR date formats into yyyy-MM-dd\nfunction normalizeDate(ocrDate: string | undefined): string {\n  if (!ocrDate) return \"\";\n\n  // Matches dd/mm/yyyy or dd-mm-yyyy\n  const match = ocrDate.match(/^(\\d{2})[\\/-](\\d{2})[\\/-](\\d{4})$/);\n  if (match) {\n    const [_, dd, mm, yyyy] = match;\n    return `${yyyy}-${mm}-${dd}`;\n  }\n\n  // Already in yyyy-MM-dd\n  const isoMatch = ocrDate.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\n  if (isoMatch) return ocrDate;\n\n  // Matches textual formats like \"23 Nov 1974\"\n  const textMatch = Date.parse(ocrDate);\n  if (!isNaN(textMatch)) {\n    const d = new Date(textMatch);\n    const yyyy = d.getFullYear();\n    const mm = String(d.getMonth() + 1).padStart(2, \"0\");\n    const dd = String(d.getDate()).padStart(2, \"0\");\n    return `${yyyy}-${mm}-${dd}`;\n  }\n\n  return \"\"; // fallback\n}\n\nexport default function PersonalInfoForm({\n  onComplete,\n  data,\n}: PersonalInfoFormProps) {\n  // Auto-fill form with data from document upload if available\n  const autoFillData = data?.autoFillData || {};\n  const form = useForm<PersonalInfoData>({\n    resolver: zodResolver(personalInfoSchema),\n    defaultValues: {\n      fullName: autoFillData.fullName || data.fullName || \"\",\n      countryCode: \"+91\",\n      mobile:\n        autoFillData.mobile?.replace(\"+91\", \"\").trim() || data.mobile || \"\",\n      email: autoFillData.email || data.email || \"\",\n      dateOfBirth: normalizeDate(autoFillData.dateOfBirth || data.dateOfBirth), // ✅ Normalize here\n      address: autoFillData.address || data.address || \"\",\n      city: autoFillData.city || data.city || \"\",\n      state: autoFillData.state || data.state || \"\",\n      pincode: autoFillData.pincode || data.pincode || \"\",\n    },\n  });\n\n  const onSubmit = (formData: PersonalInfoData) => {\n    onComplete(formData);\n  };\n\n  const indianStates = [\n    { value: \"andhra-pradesh\", label: \"Andhra Pradesh\" },\n    { value: \"karnataka\", label: \"Karnataka\" },\n    { value: \"maharashtra\", label: \"Maharashtra\" },\n    { value: \"delhi\", label: \"Delhi\" },\n    { value: \"gujarat\", label: \"Gujarat\" },\n    { value: \"tamil-nadu\", label: \"Tamil Nadu\" },\n    // Add more states as needed\n  ];\n\n  return (\n    <Card className=\"mb-6\">\n      <CardHeader>\n        <CardTitle className=\"text-xl\">Personal Information</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"fullName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Full Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter your full name\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"mobile\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Mobile Number *</FormLabel>\n                    <FormControl>\n                      <div className=\"flex\">\n                        <FormField\n                          control={form.control}\n                          name=\"countryCode\"\n                          render={({ field: countryField }) => (\n                            <Select\n                              value={countryField.value}\n                              onValueChange={countryField.onChange}\n                            >\n                              <SelectTrigger className=\"w-20\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"+91\">+91</SelectItem>\n                                <SelectItem value=\"+1\">+1</SelectItem>\n                                <SelectItem value=\"+44\">+44</SelectItem>\n                                <SelectItem value=\"+86\">+86</SelectItem>\n                                <SelectItem value=\"+81\">+81</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          )}\n                        />\n                        <Input\n                          placeholder=\"Enter 10-digit mobile number\"\n                          className=\"ml-2 flex-1\"\n                          {...field}\n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email Address *</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"your.email@example.com\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"dateOfBirth\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Date of Birth *</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"date\"\n                        value={normalizeDate(field.value)} // ✅ Normalize before rendering\n                        onChange={(e) => field.onChange(e.target.value)}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"address\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Address *</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      rows={3}\n                      placeholder=\"Enter your complete address\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"city\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>City *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"City\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"state\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>State *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select State\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {indianStates.map((state) => (\n                          <SelectItem key={state.value} value={state.value}>\n                            {state.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"pincode\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>PIN Code *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"400001\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <Button type=\"submit\" className=\"w-full\">\n              Continue to Document Upload\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":10163},"client/src/components/customer/plan-selection.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Check, Brain, CreditCard, Smartphone, Wifi, Loader2, QrCode } from \"lucide-react\";\nimport { Plan } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface PlanSelectionProps {\n  onComplete: (data: any) => void;\n  onBack: () => void;\n  canGoBack: boolean;\n  data: any;\n}\n\nexport default function PlanSelection({ onComplete, onBack, canGoBack, data }: PlanSelectionProps) {\n  const [selectedPlan, setSelectedPlan] = useState<string>(\"\");\n  const [selectedSimType, setSelectedSimType] = useState<string>(\"\");\n  const [homeAddress, setHomeAddress] = useState<string>(\"\");\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [esimData, setEsimData] = useState<any>(null);\n  const { toast } = useToast();\n\n  const { data: planData, isLoading } = useQuery({\n    queryKey: [\"/api/plans/recommended/temp-user-id\"], // Replace with actual user ID\n  });\n\n  const activationMutation = useMutation({\n    mutationFn: async (activationData: any) => {\n      if (selectedSimType === 'esim') {\n        const response = await apiRequest(\"POST\", \"/api/generate-esim\", activationData);\n        return response.json();\n      } else {\n        const response = await apiRequest(\"POST\", \"/api/sim-activation\", activationData);\n        return response.json();\n      }\n    },\n    onSuccess: (result) => {\n      if (selectedSimType === 'esim') {\n        setEsimData(result);\n      }\n      setShowSuccess(true);\n      toast({\n        title: \"Onboarding Complete!\",\n        description: selectedSimType === 'esim' \n          ? \"Your eSIM QR code has been generated\" \n          : \"Your SIM has been successfully activated\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Activation Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePlanSelect = (planId: string) => {\n    setSelectedPlan(planId);\n  };\n\n  const handleSimTypeSelect = (simType: string) => {\n    setSelectedSimType(simType);\n  };\n\n  const handleCompleteOnboarding = () => {\n    if (!selectedPlan || !selectedSimType) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select a plan and SIM type\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if ((selectedSimType === 'physical' || selectedSimType === 'dongle') && !homeAddress.trim()) {\n      toast({\n        title: \"Address Required\",\n        description: \"Please provide your home address for delivery\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const activationData = {\n      userId: 'temp-user-id', // Replace with actual user ID\n      planId: selectedPlan,\n      homeAddress: homeAddress.trim() || undefined,\n    };\n\n    activationMutation.mutate(activationData);\n  };\n\n  const plans = Array.isArray(planData) ? planData : [];\n  const recommendedPlan = plans.find((plan: any) => plan.isRecommended);\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center py-8\">\n          <Loader2 className=\"w-8 h-8 animate-spin\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (showSuccess) {\n    return (\n      <Card>\n        <CardContent className=\"text-center py-8\">\n          <div className=\"w-16 h-16 bg-success/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <Check className=\"w-8 h-8 text-success\" />\n          </div>\n          <h3 className=\"text-2xl font-bold mb-4\">Onboarding Complete!</h3>\n          <p className=\"text-gray-500 mb-6\">Your SIM has been successfully activated. You'll receive a confirmation SMS shortly.</p>\n          \n          {/* eSIM QR Code Display */}\n          {esimData && selectedSimType === 'esim' && (\n            <div className=\"mb-6\">\n              <div className=\"text-center mb-4\">\n                <div className=\"inline-block p-4 bg-white border-2 border-gray-200 rounded-lg\">\n                  <img \n                    src={esimData.qrCode} \n                    alt=\"eSIM QR Code\" \n                    className=\"w-48 h-48 mx-auto\"\n                  />\n                </div>\n              </div>\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4\">\n                <div className=\"flex items-center mb-2\">\n                  <QrCode className=\"w-4 h-4 text-blue-600 mr-2\" />\n                  <span className=\"font-medium text-blue-800\">eSIM Activation Instructions</span>\n                </div>\n                <p className=\"text-sm text-blue-700 mb-2\">\n                  {esimData.instructions}\n                </p>\n                <div className=\"text-xs text-blue-600\">\n                  <strong>Activation Code:</strong> {esimData.activationCode}\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"bg-gray-50 rounded-lg p-4 mb-6\">\n            <div className=\"text-left space-y-2\">\n              {selectedSimType === 'esim' && esimData ? (\n                <>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Activation Code:</span>\n                    <span className=\"font-medium font-mono\">{esimData.activationCode}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Type:</span>\n                    <span className=\"font-medium\">eSIM</span>\n                  </div>\n                </>\n              ) : (\n                <>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>SIM Number:</span>\n                    <span className=\"font-medium\">Will be assigned</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Type:</span>\n                    <span className=\"font-medium capitalize\">{selectedSimType}</span>\n                  </div>\n                </>\n              )}\n              <div className=\"flex justify-between text-sm\">\n                <span>Plan:</span>\n                <span className=\"font-medium\">{plans.find((p: any) => p.id === selectedPlan)?.name || 'Selected Plan'}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span>Status:</span>\n                <span className=\"font-medium text-success\">Active</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-3\">\n            <Button className=\"w-full\">Download Receipt</Button>\n            <Button variant=\"outline\" className=\"w-full\" onClick={() => window.location.href = \"/\"}>\n              Return to Home\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"mb-6\">\n      <CardHeader>\n        <CardTitle className=\"text-xl\">Select Your Plan</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {/* AI Recommendation Banner */}\n        {recommendedPlan && (\n          <Alert className=\"mb-6 border-primary bg-primary/5\">\n            <Brain className=\"w-4 h-4 text-primary\" />\n            <AlertDescription>\n              <span className=\"font-medium\">AI Recommendation</span>\n              <br />\n              Based on your usage pattern, we recommend the {recommendedPlan.name} Plan\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Plan Cards */}\n        <div className=\"grid md:grid-cols-3 gap-6 mb-6\">\n          {plans.map((plan: any) => (\n            <div\n              key={plan.id}\n              className={`border rounded-lg p-6 cursor-pointer transition-colors relative ${\n                selectedPlan === plan.id\n                  ? 'border-primary bg-primary/5'\n                  : plan.isRecommended\n                  ? 'border-primary border-2 bg-primary/5'\n                  : 'border-gray-200 hover:border-primary'\n              }`}\n              onClick={() => handlePlanSelect(plan.id)}\n            >\n              {plan.isRecommended && (\n                <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                  <Badge className=\"bg-primary text-white\">AI Recommended</Badge>\n                </div>\n              )}\n              <div className=\"text-center\">\n                <h4 className=\"text-lg font-semibold mb-2\">{plan.name}</h4>\n                <div className=\"text-2xl font-bold text-primary mb-4\">\n                  ₹{plan.price}<span className=\"text-sm font-normal text-gray-500\">/month</span>\n                </div>\n                <ul className=\"text-sm space-y-2 text-left\">\n                  <li className=\"flex items-center\">\n                    <Check className=\"w-4 h-4 text-success mr-2 flex-shrink-0\" />\n                    {plan.dataLimit}\n                  </li>\n                  {plan.features && Array.isArray(plan.features) && plan.features.map((feature, index) => (\n                    <li key={index} className=\"flex items-center\">\n                      <Check className=\"w-4 h-4 text-success mr-2 flex-shrink-0\" />\n                      <span>{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* SIM Type Selection */}\n        <div className=\"mb-6\">\n          <h5 className=\"font-medium mb-3\">Choose SIM Type</h5>\n          <div className=\"grid md:grid-cols-3 gap-4\">\n            <div\n              className={`border rounded-lg p-4 cursor-pointer transition-colors ${\n                selectedSimType === 'physical' ? 'border-primary bg-primary/5' : 'border-gray-200 hover:border-primary'\n              }`}\n              onClick={() => handleSimTypeSelect('physical')}\n            >\n              <div className=\"text-center\">\n                <CreditCard className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                <h6 className=\"font-medium\">Physical SIM</h6>\n                <p className=\"text-xs text-gray-500\">Home delivery</p>\n              </div>\n            </div>\n            <div\n              className={`border rounded-lg p-4 cursor-pointer transition-colors ${\n                selectedSimType === 'esim' ? 'border-primary bg-primary/5' : 'border-gray-200 hover:border-primary'\n              }`}\n              onClick={() => handleSimTypeSelect('esim')}\n            >\n              <div className=\"text-center\">\n                <Smartphone className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                <h6 className=\"font-medium\">eSIM</h6>\n                <p className=\"text-xs text-gray-500\">Instant activation</p>\n              </div>\n            </div>\n            <div\n              className={`border rounded-lg p-4 cursor-pointer transition-colors ${\n                selectedSimType === 'dongle' ? 'border-primary bg-primary/5' : 'border-gray-200 hover:border-primary'\n              }`}\n              onClick={() => handleSimTypeSelect('dongle')}\n            >\n              <div className=\"text-center\">\n                <Wifi className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                <h6 className=\"font-medium\">Dongle</h6>\n                <p className=\"text-xs text-gray-500\">Data only</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Home Address for Physical SIM/Dongle */}\n        {(selectedSimType === 'physical' || selectedSimType === 'dongle') && (\n          <div className=\"mb-6\">\n            <Label htmlFor=\"home-address\" className=\"block text-sm font-medium mb-2\">\n              Home Address *\n            </Label>\n            <Textarea\n              id=\"home-address\"\n              placeholder=\"Enter your complete home address for delivery\"\n              value={homeAddress}\n              onChange={(e) => setHomeAddress(e.target.value)}\n              rows={3}\n              className=\"w-full\"\n            />\n            <p className=\"text-xs text-gray-500 mt-1\">\n              This address will be used for {selectedSimType} delivery\n            </p>\n          </div>\n        )}\n\n        <div className=\"flex space-x-4\">\n          {canGoBack && (\n            <Button onClick={onBack} variant=\"outline\" className=\"flex-1\">\n              Back\n            </Button>\n          )}\n          <Button \n            onClick={handleCompleteOnboarding} \n            className=\"flex-1 bg-success hover:bg-success/90\"\n            disabled={!selectedPlan || !selectedSimType || ((selectedSimType === 'physical' || selectedSimType === 'dongle') && !homeAddress.trim()) || activationMutation.isPending}\n          >\n            {activationMutation.isPending ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Activating...\n              </>\n            ) : (\n              \"Complete Onboarding\"\n            )}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":13312},"client/src/components/enterprise/add-employee-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AddEmployeeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function AddEmployeeModal({ isOpen, onClose }: AddEmployeeModalProps) {\n  const [formData, setFormData] = useState({\n    fullName: \"\",\n    email: \"\",\n    mobile: \"\",\n    department: \"\",\n    planId: \"premium\"\n  });\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const addEmployeeMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/enterprise/employees\", data).then(res => res.json());\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Employee Added\",\n        description: \"Employee has been added successfully and will receive SIM activation instructions.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/enterprise/employees\"] });\n      onClose();\n      setFormData({\n        fullName: \"\",\n        email: \"\",\n        mobile: \"\",\n        department: \"\",\n        planId: \"premium\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add employee. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    addEmployeeMutation.mutate({\n      ...formData,\n      enterpriseId: 'techcorp-enterprise',\n      kycStatus: 'pending'\n    });\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>Add New Employee</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"fullName\">Full Name *</Label>\n            <Input\n              id=\"fullName\"\n              value={formData.fullName}\n              onChange={(e) => handleInputChange(\"fullName\", e.target.value)}\n              placeholder=\"Enter employee's full name\"\n              required\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"email\">Email Address *</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) => handleInputChange(\"email\", e.target.value)}\n              placeholder=\"employee@company.com\"\n              required\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"mobile\">Mobile Number *</Label>\n            <Input\n              id=\"mobile\"\n              value={formData.mobile}\n              onChange={(e) => handleInputChange(\"mobile\", e.target.value)}\n              placeholder=\"Enter 10-digit mobile number\"\n              required\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"department\">Department</Label>\n            <Select value={formData.department} onValueChange={(value) => handleInputChange(\"department\", value)}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select department\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"IT\">Information Technology</SelectItem>\n                <SelectItem value=\"HR\">Human Resources</SelectItem>\n                <SelectItem value=\"Finance\">Finance</SelectItem>\n                <SelectItem value=\"Marketing\">Marketing</SelectItem>\n                <SelectItem value=\"Operations\">Operations</SelectItem>\n                <SelectItem value=\"Sales\">Sales</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label htmlFor=\"plan\">SIM Plan</Label>\n            <Select value={formData.planId} onValueChange={(value) => handleInputChange(\"planId\", value)}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"basic\">Basic Plan - ₹299/month</SelectItem>\n                <SelectItem value=\"premium\">Premium Plan - ₹499/month</SelectItem>\n                <SelectItem value=\"enterprise\">Enterprise Plan - ₹799/month</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={addEmployeeMutation.isPending}>\n              {addEmployeeMutation.isPending ? \"Adding...\" : \"Add Employee\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5281},"client/src/components/enterprise/billing-settings.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Download, CreditCard, DollarSign, Calendar, TrendingUp } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface BillingSettingsProps {\n  onBack: () => void;\n}\n\nexport default function BillingSettings({ onBack }: BillingSettingsProps) {\n  const { data: billing, isLoading } = useQuery({\n    queryKey: [\"/api/enterprise/billing\"],\n    queryFn: ({ queryKey }) => fetch(queryKey[0]).then(res => res.json()),\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <Button variant=\"ghost\" onClick={onBack}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Overview\n          </Button>\n        </div>\n        <div className=\"animate-pulse\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            {[1,2,3].map(i => (\n              <div key={i} className=\"bg-gray-200 h-32 rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const billData = billing || {\n    currentBill: 45750,\n    previousBill: 42300,\n    dueDate: \"2025-09-15\",\n    status: \"current\",\n    accountBalance: -1250,\n    breakdown: [],\n    paymentHistory: []\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" onClick={onBack}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Overview\n          </Button>\n          <h2 className=\"text-2xl font-bold\">Billing & Settings</h2>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Download Invoice\n          </Button>\n          <Button size=\"sm\">\n            Make Payment\n          </Button>\n        </div>\n      </div>\n\n      {/* Current Bill Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Current Bill</p>\n                <p className=\"text-3xl font-bold text-gray-900\">{formatCurrency(billData.currentBill)}</p>\n                <p className=\"text-sm text-gray-500 mt-1\">Due: {billData.dueDate}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                <DollarSign className=\"w-6 h-6 text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Previous Bill</p>\n                <p className=\"text-3xl font-bold text-gray-900\">{formatCurrency(billData.previousBill)}</p>\n                <p className=\"text-sm text-success mt-1\">+{Math.round(((billData.currentBill - billData.previousBill) / billData.previousBill) * 100)}% increase</p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                <TrendingUp className=\"w-6 h-6 text-green-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Account Status</p>\n                <div className=\"flex items-center space-x-2 mt-2\">\n                  <Badge variant=\"default\" className=\"bg-success text-white\">\n                    {billData.status === 'current' ? 'Current' : billData.status}\n                  </Badge>\n                  {billData.accountBalance < 0 && (\n                    <Badge variant=\"secondary\">\n                      Credit: {formatCurrency(Math.abs(billData.accountBalance))}\n                    </Badge>\n                  )}\n                </div>\n              </div>\n              <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                <CreditCard className=\"w-6 h-6 text-green-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Bill Breakdown */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Current Bill Breakdown</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {billData.breakdown?.map((item: any, index: number) => (\n              <div key={index} className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n                <div>\n                  <p className=\"font-medium\">{item.service}</p>\n                  <p className=\"text-sm text-gray-500\">{item.description}</p>\n                  {item.count && <p className=\"text-xs text-gray-400\">{item.count} units</p>}\n                  {item.usage && <p className=\"text-xs text-gray-400\">{item.usage} consumed</p>}\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-lg font-bold\">{formatCurrency(item.amount)}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"border-t pt-4 mt-4\">\n            <div className=\"flex items-center justify-between text-lg font-bold\">\n              <span>Total Amount</span>\n              <span>{formatCurrency(billData.currentBill)}</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Payment History */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Payment History</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {billData.paymentHistory?.map((payment: any, index: number) => (\n              <div key={index} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center\">\n                    <Calendar className=\"w-5 h-5 text-gray-600\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium\">{payment.date}</p>\n                    <p className=\"text-sm text-gray-500\">{payment.method}</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-medium\">{formatCurrency(payment.amount)}</p>\n                  <Badge variant=\"default\" className=\"bg-success text-white text-xs\">\n                    {payment.status}\n                  </Badge>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Payment Settings */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Payment Settings</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n              <div>\n                <p className=\"font-medium\">Auto-Pay</p>\n                <p className=\"text-sm text-gray-500\">Automatically pay bills on due date</p>\n              </div>\n              <Button variant=\"outline\" size=\"sm\">\n                Enable\n              </Button>\n            </div>\n            \n            <div className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n              <div>\n                <p className=\"font-medium\">Payment Method</p>\n                <p className=\"text-sm text-gray-500\">Bank Transfer (HDFC Bank ****1234)</p>\n              </div>\n              <Button variant=\"outline\" size=\"sm\">\n                Change\n              </Button>\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n              <div>\n                <p className=\"font-medium\">Billing Address</p>\n                <p className=\"text-sm text-gray-500\">TechCorp Pvt Ltd, Sector 12, Gurgaon</p>\n              </div>\n              <Button variant=\"outline\" size=\"sm\">\n                Update\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8999},"client/src/components/enterprise/bulk-upload-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Upload, FileText, X, CheckCircle, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { uploadService } from \"@/services/upload-service\";\n\ninterface BulkUploadModalProps {\n  onClose: () => void;\n}\n\nexport default function BulkUploadModal({ onClose }: BulkUploadModalProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [csvFile, setCsvFile] = useState<File | null>(null);\n  const [uploadResults, setUploadResults] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setCsvFile(file);\n      toast({\n        title: \"File Selected\",\n        description: `${file.name} ready for upload`,\n      });\n    }\n  };\n\n  const bulkUploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('csvFile', file);\n      formData.append('enterpriseId', 'techcorp-enterprise');\n      return uploadService.uploadBulkCSV(formData);\n    },\n    onSuccess: (result) => {\n      setUploadResults(result);\n      setCurrentStep(2);\n      toast({\n        title: \"Upload Successful\",\n        description: `Successfully processed ${result.employeeCount} employees`,\n      });\n      // Refresh employee list\n      queryClient.invalidateQueries({ queryKey: [\"/api/enterprise/employees\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Upload Failed\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    },\n  });\n\n  const handleContinue = () => {\n    if (csvFile && currentStep === 1) {\n      bulkUploadMutation.mutate(csvFile);\n    } else if (currentStep === 2) {\n      setCurrentStep(3);\n      // Simulate document processing\n      setTimeout(() => {\n        toast({\n          title: \"Processing Complete\",\n          description: \"All employee documents have been processed\"\n        });\n        onClose();\n      }, 3000);\n    }\n  };\n\n  const steps = [\n    { step: 1, label: \"Upload CSV\", active: currentStep >= 1 },\n    { step: 2, label: \"Upload Documents\", active: currentStep >= 2 },\n    { step: 3, label: \"AI Processing\", active: currentStep >= 3 }\n  ];\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"text-xl\">Bulk KYC Upload</DialogTitle>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        {/* Upload Steps */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center justify-between text-sm\">\n            {steps.map((step, index) => (\n              <div key={step.step} className=\"flex items-center\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs ${\n                    step.active ? 'bg-primary text-white' : 'bg-gray-200 text-gray-500'\n                  }`}>\n                    {step.step}\n                  </div>\n                  <span className={step.active ? 'text-primary' : 'text-gray-500'}>\n                    {step.label}\n                  </span>\n                </div>\n                {index < steps.length - 1 && (\n                  <div className=\"flex-1 h-1 bg-gray-200 mx-4\"></div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {currentStep === 1 && (\n          <>\n            {/* CSV Upload */}\n            <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center mb-6\">\n              <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h4 className=\"text-lg font-medium mb-2\">Upload Employee Data CSV</h4>\n              <p className=\"text-gray-500 mb-4\">Upload a CSV file with employee information</p>\n              <Input\n                type=\"file\"\n                id=\"csvUpload\"\n                className=\"hidden\"\n                accept=\".csv\"\n                onChange={handleFileSelect}\n              />\n              <Button onClick={() => document.getElementById('csvUpload')?.click()}>\n                Choose CSV File\n              </Button>\n              <p className=\"text-xs text-gray-500 mt-2\">\n                <a href=\"#\" className=\"text-primary hover:underline\">Download sample CSV template</a>\n              </p>\n            </div>\n\n            {csvFile && (\n              <Alert className=\"mb-6\">\n                <Upload className=\"w-4 h-4\" />\n                <AlertDescription>\n                  File selected: {csvFile.name} ({(csvFile.size / 1024).toFixed(1)} KB)\n                </AlertDescription>\n              </Alert>\n            )}\n          </>\n        )}\n\n        {currentStep === 2 && uploadResults && (\n          <div>\n            <h4 className=\"font-medium mb-4\">CSV Processing Complete</h4>\n            <p className=\"text-sm text-gray-600 mb-4\">\n              Successfully processed {uploadResults.employeeCount} employees from the CSV.\n            </p>\n            \n            <Alert className=\"mb-6 border-green-200 bg-green-50\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              <AlertDescription>\n                <h5 className=\"font-medium mb-2 text-green-800\">Upload Summary:</h5>\n                <div className=\"text-sm space-y-1 text-green-700\">\n                  <div>• {uploadResults.employeeCount} employees added to the system</div>\n                  <div>• KYC status set to 'pending' for all employees</div>\n                  <div>• Email notifications sent to employees</div>\n                </div>\n              </AlertDescription>\n            </Alert>\n            \n            <Alert className=\"mb-6\">\n              <AlertDescription>\n                <h5 className=\"font-medium mb-2\">Next Steps:</h5>\n                <ul className=\"text-sm space-y-1\">\n                  <li>• Employees will receive KYC completion instructions via email</li>\n                  <li>• Documents will be processed automatically using AI</li>\n                  <li>• SIM activation will begin once KYC is approved</li>\n                  <li>• You can track progress in the Employee Management dashboard</li>\n                </ul>\n              </AlertDescription>\n            </Alert>\n          </div>\n        )}\n        \n        {currentStep === 3 && (\n          <div className=\"text-center py-8\">\n            <Loader2 className=\"w-12 h-12 animate-spin text-primary mx-auto mb-4\" />\n            <h4 className=\"font-medium mb-2\">Processing Employee Documents</h4>\n            <p className=\"text-sm text-gray-600\">AI is analyzing and verifying uploaded documents...</p>\n          </div>\n        )}\n\n        {/* Document Upload Instructions */}\n        {currentStep === 1 && (\n          <Alert className=\"mb-6\">\n            <AlertDescription>\n              <h5 className=\"font-medium mb-2\">Required Documents for Each Employee:</h5>\n              <ul className=\"text-sm space-y-1\">\n                <li>• Aadhaar Card (front and back)</li>\n                <li>• PAN Card</li>\n                <li>• Passport size photograph</li>\n                <li>• Address proof (if different from Aadhaar)</li>\n              </ul>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        <div className=\"flex space-x-4\">\n          <Button onClick={onClose} variant=\"outline\" className=\"flex-1\">\n            Cancel\n          </Button>\n          <Button \n            onClick={handleContinue} \n            className=\"flex-1\" \n            disabled={(!csvFile && currentStep === 1) || bulkUploadMutation.isPending}\n          >\n            {bulkUploadMutation.isPending ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Processing...\n              </>\n            ) : currentStep === 1 ? 'Upload CSV' : currentStep === 2 ? 'Start Document Processing' : 'Complete'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8617},"client/src/components/enterprise/employee-management.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Upload, Plus, BarChart3, Settings, Filter, Download, MoreVertical, Users, TrendingUp, CreditCard } from \"lucide-react\";\nimport BulkUploadModal from \"./bulk-upload-modal\";\nimport AddEmployeeModal from \"./add-employee-modal\";\nimport UsageAnalyticsModal from \"./usage-analytics-modal\";\nimport BillingSettingsModal from \"./billing-settings-modal\";\nimport EmployeeActionsDropdown from \"./employee-actions-dropdown\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function EmployeeManagement() {\n  const [showBulkUpload, setShowBulkUpload] = useState(false);\n  const [showAddEmployee, setShowAddEmployee] = useState(false);\n  const [showUsageAnalytics, setShowUsageAnalytics] = useState(false);\n  const [showBillingSettings, setShowBillingSettings] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [filteredEmployees, setFilteredEmployees] = useState<any[]>([]);\n  const { toast } = useToast();\n\n  const quickActions = [\n    {\n      icon: Upload,\n      title: \"Bulk KYC Upload\",\n      description: \"Upload employee documents in bulk\",\n      onClick: () => setShowBulkUpload(true)\n    },\n    {\n      icon: Plus,\n      title: \"Add Employee\",\n      description: \"Individual SIM activation\",\n      onClick: () => setShowAddEmployee(true)\n    },\n    {\n      icon: BarChart3,\n      title: \"Usage Analytics\",\n      description: \"View detailed usage reports\",\n      onClick: () => setShowUsageAnalytics(true)\n    },\n    {\n      icon: Settings,\n      title: \"Billing Settings\",\n      description: \"Manage plans and billing\",\n      onClick: () => setShowBillingSettings(true)\n    }\n  ];\n\n  // Fetch employees from API\n  const { data: employees = [], isLoading, error } = useQuery({\n    queryKey: [\"/api/enterprise/employees\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  // Filter employees based on search and status\n  useEffect(() => {\n    let filtered: any[] = employees || [];\n    \n    if (searchTerm) {\n      filtered = filtered.filter((emp: any) => \n        emp.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        emp.email?.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n    \n    if (statusFilter !== \"all\") {\n      filtered = filtered.filter((emp: any) => \n        emp.status?.toLowerCase() === statusFilter.toLowerCase()\n      );\n    }\n    \n    setFilteredEmployees(filtered);\n  }, [employees, searchTerm, statusFilter]);\n\n  const handleDownload = () => {\n    try {\n      // Create CSV content\n      const csvHeaders = ['Name', 'Email', 'Phone', 'Department', 'Status', 'SIM Number', 'Plan', 'Usage'];\n      const csvRows = filteredEmployees.map((emp: any) => [\n        emp.name || '',\n        emp.email || '',\n        emp.phone || '',\n        emp.department || '',\n        emp.status || '',\n        emp.simNumber || '',\n        emp.plan || '',\n        emp.usage || ''\n      ]);\n      \n      const csvContent = [csvHeaders, ...csvRows]\n        .map(row => row.map(field => `\"${field}\"`).join(','))\n        .join('\\n');\n      \n      // Create and download file\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const link = document.createElement('a');\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', `employees_${new Date().toISOString().split('T')[0]}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      toast({\n        title: \"Download Complete\",\n        description: \"Employee data has been downloaded as CSV\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Download Failed\",\n        description: \"Failed to download employee data\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const recentActivities = [\n    {\n      icon: \"✅\",\n      title: \"SIM activated for Rahul Sharma\",\n      time: \"2 hours ago\",\n      color: \"bg-success/10\"\n    },\n    {\n      icon: \"📤\",\n      title: \"Bulk KYC upload completed\",\n      time: \"1 day ago\",\n      color: \"bg-warning/10\"\n    },\n    {\n      icon: \"👥\",\n      title: \"5 new employees added\",\n      time: \"2 days ago\",\n      color: \"bg-primary/10\"\n    }\n  ];\n\n  return (\n    <div className=\"grid lg:grid-cols-3 gap-8\">\n      {/* Main Content */}\n      <div className=\"lg:col-span-2\">\n        {/* Quick Actions */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              {quickActions.map((action, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center space-x-3 p-4 border border-gray-200 rounded-lg hover:border-primary transition-colors cursor-pointer\"\n                  onClick={action.onClick}\n                >\n                  <action.icon className=\"w-6 h-6 text-primary\" />\n                  <div className=\"text-left\">\n                    <h4 className=\"font-medium\">{action.title}</h4>\n                    <p className=\"text-sm text-gray-500\">{action.description}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Employee SIM Management */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg\">Employee SIM Management</CardTitle>\n              <div className=\"flex space-x-2\">\n                <Button variant=\"ghost\" size=\"sm\" onClick={() => setStatusFilter(statusFilter === \"all\" ? \"active\" : \"all\")}>\n                  <Filter className=\"w-4 h-4\" />\n                </Button>\n                <Button variant=\"ghost\" size=\"sm\" onClick={handleDownload}>\n                  <Download className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {/* Search and Filters */}\n            <div className=\"flex space-x-4 mb-4\">\n              <div className=\"flex-1\">\n                <Input \n                  placeholder=\"Search employees...\" \n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue placeholder=\"All Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"suspended\">Suspended</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Employee Table */}\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b border-gray-200\">\n                    <th className=\"text-left py-3 text-sm font-medium text-gray-500\">Employee</th>\n                    <th className=\"text-left py-3 text-sm font-medium text-gray-500\">SIM Number</th>\n                    <th className=\"text-left py-3 text-sm font-medium text-gray-500\">Plan</th>\n                    <th className=\"text-left py-3 text-sm font-medium text-gray-500\">Status</th>\n                    <th className=\"text-left py-3 text-sm font-medium text-gray-500\">Usage</th>\n                    <th className=\"text-left py-3 text-sm font-medium text-gray-500\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {isLoading ? (\n                    <tr>\n                      <td colSpan={6} className=\"py-8 text-center text-gray-500\">\n                        Loading employees...\n                      </td>\n                    </tr>\n                  ) : filteredEmployees.length === 0 ? (\n                    <tr>\n                      <td colSpan={6} className=\"py-8 text-center text-gray-500\">\n                        {searchTerm || statusFilter !== \"all\" ? \"No employees match your filters\" : \"No employees found\"}\n                      </td>\n                    </tr>\n                  ) : (\n                    filteredEmployees.map((employee: any, index: number) => (\n                      <tr key={employee.id || index} className=\"border-b border-gray-100\">\n                        <td className=\"py-3\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center text-sm\">\n                              {employee.name?.charAt(0) || 'E'}\n                            </div>\n                            <div>\n                              <p className=\"font-medium\">{employee.name}</p>\n                              <p className=\"text-sm text-gray-500\">{employee.email}</p>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"py-3 text-sm\">{employee.simNumber || 'Not assigned'}</td>\n                        <td className=\"py-3 text-sm\">{employee.plan || 'No plan'}</td>\n                        <td className=\"py-3\">\n                          <Badge\n                            variant={employee.status === \"active\" ? \"default\" : \"secondary\"}\n                            className={\n                              employee.status === \"active\" \n                                ? \"bg-success/10 text-success\" \n                                : \"bg-warning/10 text-warning\"\n                            }\n                          >\n                            {employee.status || 'pending'}\n                          </Badge>\n                        </td>\n                        <td className=\"py-3 text-sm\">{employee.usage || '-'}</td>\n                        <td className=\"py-3\">\n                          <EmployeeActionsDropdown employee={employee} />\n                        </td>\n                      </tr>\n                    ))\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Sidebar */}\n      <div className=\"lg:col-span-1\">\n        {/* Recent Activities */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Recent Activities</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {recentActivities.map((activity, index) => (\n                <div key={index} className=\"flex items-start space-x-3\">\n                  <div className={`w-8 h-8 ${activity.color} rounded-full flex items-center justify-center text-sm`}>\n                    {activity.icon}\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium\">{activity.title}</p>\n                    <p className=\"text-xs text-gray-500\">{activity.time}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n      </div>\n\n      {/* Modals */}\n      {showBulkUpload && (\n        <BulkUploadModal onClose={() => setShowBulkUpload(false)} />\n      )}\n      \n      <AddEmployeeModal \n        isOpen={showAddEmployee} \n        onClose={() => setShowAddEmployee(false)} \n      />\n      \n      <UsageAnalyticsModal \n        isOpen={showUsageAnalytics} \n        onClose={() => setShowUsageAnalytics(false)} \n      />\n      \n      <BillingSettingsModal \n        isOpen={showBillingSettings} \n        onClose={() => setShowBillingSettings(false)} \n      />\n    </div>\n  );\n}\n","size_bytes":12417},"client/src/components/enterprise/stats-overview.tsx":{"content":"import { MessageSquareMore, Clock, TrendingUp, Database } from \"lucide-react\";\n\nexport default function StatsOverview() {\n  const stats = [\n    {\n      title: \"Active SIMs\",\n      value: \"247\",\n      icon: MessageSquareMore,\n      color: \"text-primary\",\n      change: \"+12 this month\",\n      changeColor: \"text-success\"\n    },\n    {\n      title: \"Pending Activations\",\n      value: \"8\",\n      icon: Clock,\n      color: \"text-warning\",\n      change: \"Requires approval\",\n      changeColor: \"text-warning\"\n    },\n    {\n      title: \"Monthly Spend\",\n      value: \"₹1,23,450\",\n      icon: TrendingUp,\n      color: \"text-success\",\n      change: \"Budget: ₹2,00,000\",\n      changeColor: \"text-gray-500\"\n    },\n    {\n      title: \"Data Usage\",\n      value: \"2.4TB\",\n      icon: Database,\n      color: \"text-secondary\",\n      change: \"This month\",\n      changeColor: \"text-gray-500\"\n    }\n  ];\n\n  return (\n    <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n      {stats.map((stat, index) => (\n        <div key={index} className=\"bg-white rounded-xl shadow-lg p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-gray-500 text-sm\">{stat.title}</p>\n              <p className=\"text-2xl font-bold\">{stat.value}</p>\n            </div>\n            <stat.icon className={`w-8 h-8 ${stat.color}`} />\n          </div>\n          <div className={`mt-2 text-sm ${stat.changeColor}`}>\n            {stat.change.startsWith('+') && <span>↗ </span>}\n            {stat.change}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1585},"client/src/components/enterprise/usage-analytics.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Download, TrendingUp, Users, Activity, BarChart3 } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface UsageAnalyticsProps {\n  onBack: () => void;\n}\n\nexport default function UsageAnalytics({ onBack }: UsageAnalyticsProps) {\n  const [timeRange, setTimeRange] = useState(\"30d\");\n\n  const { data: analytics, isLoading } = useQuery({\n    queryKey: [\"/api/enterprise/analytics\", timeRange],\n    queryFn: ({ queryKey }) => fetch(queryKey.join(\"?period=\")).then(res => res.json()),\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <Button variant=\"ghost\" onClick={onBack}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Overview\n          </Button>\n        </div>\n        <div className=\"animate-pulse\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            {[1,2,3,4].map(i => (\n              <div key={i} className=\"bg-gray-200 h-32 rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const stats = analytics || {\n    totalEmployees: 150,\n    activeConnections: 142,\n    pendingActivations: 8,\n    dataUsage: { total: \"2.4 TB\", thisMonth: \"0.8 TB\", trend: \"+12%\" },\n    monthlyGrowth: \"+15%\"\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" onClick={onBack}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Overview\n          </Button>\n          <h2 className=\"text-2xl font-bold\">Usage Analytics</h2>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <select\n            value={timeRange}\n            onChange={(e) => setTimeRange(e.target.value)}\n            className=\"px-3 py-2 border border-gray-300 rounded-md text-sm\"\n          >\n            <option value=\"7d\">Last 7 days</option>\n            <option value=\"30d\">Last 30 days</option>\n            <option value=\"90d\">Last 90 days</option>\n          </select>\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export Report\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Employees</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.totalEmployees}</p>\n                <p className=\"text-xs text-success mt-1\">{stats.monthlyGrowth} from last month</p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                <Users className=\"w-6 h-6 text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Active Connections</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.activeConnections}</p>\n                <p className=\"text-xs text-success mt-1\">94.7% uptime</p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                <Activity className=\"w-6 h-6 text-green-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Pending Activations</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.pendingActivations}</p>\n                <p className=\"text-xs text-warning mt-1\">Processing today</p>\n              </div>\n              <div className=\"w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center\">\n                <TrendingUp className=\"w-6 h-6 text-yellow-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Data Usage</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.dataUsage.total}</p>\n                <p className=\"text-xs text-success mt-1\">{stats.dataUsage.trend} this month</p>\n              </div>\n              <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center\">\n                <BarChart3 className=\"w-6 h-6 text-purple-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts and Details */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Plan Distribution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {analytics?.topPlans?.map((plan: any, index: number) => (\n                <div key={index} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-4 h-4 rounded-full ${\n                      index === 0 ? 'bg-blue-500' : index === 1 ? 'bg-green-500' : 'bg-yellow-500'\n                    }`}></div>\n                    <span className=\"text-sm font-medium\">{plan.name}</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm font-medium\">{plan.users} users</div>\n                    <div className=\"text-xs text-gray-500\">{plan.percentage}%</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Activity</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {analytics?.recentActivity?.map((activity: any, index: number) => (\n                <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div>\n                    <p className=\"text-sm font-medium\">{activity.action}</p>\n                    <p className=\"text-xs text-gray-500\">{activity.user}</p>\n                  </div>\n                  <span className=\"text-xs text-gray-400\">{activity.time}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Usage Trends */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Usage Trends</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-64 flex items-center justify-center bg-gray-50 rounded-lg\">\n            <div className=\"text-center\">\n              <BarChart3 className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">Interactive usage chart would be displayed here</p>\n              <p className=\"text-sm text-gray-400\">Showing data usage, activation trends, and performance metrics</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7846},"client/src/components/operator/fraud-alerts.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertTriangle, Filter } from \"lucide-react\";\nimport { FraudAlert } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function FraudAlerts() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: alerts = [], isLoading } = useQuery({\n    queryKey: [\"/api/fraud-alerts\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const updateAlertMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<FraudAlert> }) => {\n      const response = await apiRequest(\"PATCH\", `/api/fraud-alerts/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/fraud-alerts\"] });\n      toast({\n        title: \"Alert Updated\",\n        description: \"Fraud alert status has been updated\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleReviewAlert = (alertId: string) => {\n    updateAlertMutation.mutate({\n      id: alertId,\n      updates: { status: \"reviewed\" }\n    });\n  };\n\n  const handleDismissAlert = (alertId: string) => {\n    updateAlertMutation.mutate({\n      id: alertId,\n      updates: { status: \"dismissed\" }\n    });\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case \"critical\":\n        return \"border-destructive bg-destructive/5\";\n      case \"high\":\n        return \"border-warning bg-warning/5\";\n      case \"medium\":\n        return \"border-secondary bg-secondary/5\";\n      default:\n        return \"border-gray-200 bg-gray-50\";\n    }\n  };\n\n  const getSeverityBadgeColor = (severity: string) => {\n    switch (severity) {\n      case \"critical\":\n        return \"bg-destructive text-white\";\n      case \"high\":\n        return \"bg-warning text-white\";\n      case \"medium\":\n        return \"bg-secondary text-white\";\n      default:\n        return \"bg-gray-500 text-white\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const activeAlerts = (alerts as FraudAlert[])?.filter((alert: FraudAlert) => alert.status === \"active\") || [];\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg\">AI Fraud Detection Alerts</CardTitle>\n          <div className=\"flex space-x-2\">\n            <Badge variant=\"destructive\">{activeAlerts.length} Active</Badge>\n            <Button variant=\"ghost\" size=\"sm\">\n              <Filter className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {activeAlerts.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <AlertTriangle className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Active Fraud Alerts</h3>\n            <p className=\"text-gray-500\">All systems are secure and functioning normally.</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {activeAlerts.map((alert: FraudAlert) => (\n              <div\n                key={alert.id}\n                className={`border-l-4 p-4 rounded-r-lg ${getSeverityColor(alert.severity)}`}\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <Badge className={getSeverityBadgeColor(alert.severity)}>\n                        {alert.severity.toUpperCase()}\n                      </Badge>\n                      <span className=\"text-sm text-gray-500\">\n                        {alert.createdAt ? new Date(alert.createdAt).toLocaleString() : 'Just now'}\n                      </span>\n                    </div>\n                    <h4 className=\"font-medium mb-1\">{alert.alertType.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}</h4>\n                    <p className=\"text-sm text-gray-600 mb-2\">{alert.description}</p>\n                    <div className=\"flex items-center space-x-4 text-sm\">\n                      {alert.confidence && (\n                        <span>Confidence: {(alert.confidence * 100).toFixed(1)}%</span>\n                      )}\n                      {alert.userId && (\n                        <span>User ID: {alert.userId.slice(0, 8)}...</span>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      size=\"sm\"\n                      onClick={() => handleReviewAlert(alert.id)}\n                      disabled={updateAlertMutation.isPending}\n                      className={\n                        alert.severity === \"critical\" \n                          ? \"bg-destructive hover:bg-destructive/90\" \n                          : alert.severity === \"high\"\n                          ? \"bg-warning hover:bg-warning/90\"\n                          : \"bg-secondary hover:bg-secondary/90\"\n                      }\n                    >\n                      Review\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleDismissAlert(alert.id)}\n                      disabled={updateAlertMutation.isPending}\n                    >\n                      Dismiss\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6207},"client/src/components/operator/pending-approvals.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { RefreshCw, Eye, CheckCircle, XCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface PendingApproval {\n  id: string;\n  applicationId: string;\n  customerName: string;\n  contactInfo: string;\n  type: \"Individual\" | \"Enterprise\";\n  aiScore: number;\n  submittedAt: string;\n  employeeCount?: number;\n}\n\nexport default function PendingApprovals() {\n  const { toast } = useToast();\n  const [filterType, setFilterType] = useState(\"all\");\n\n  // Mock data - in real app this would come from API\n  const pendingApprovals: PendingApproval[] = [\n    {\n      id: \"1\",\n      applicationId: \"KYC-2024-001234\",\n      customerName: \"Anil Kumar\",\n      contactInfo: \"+91-9876543210\",\n      type: \"Individual\",\n      aiScore: 92,\n      submittedAt: \"2 hours ago\"\n    },\n    {\n      id: \"2\", \n      applicationId: \"KYC-2024-001235\",\n      customerName: \"TechCorp Pvt Ltd\",\n      contactInfo: \"Bulk: 25 employees\",\n      type: \"Enterprise\",\n      aiScore: 96,\n      submittedAt: \"4 hours ago\",\n      employeeCount: 25\n    },\n    {\n      id: \"3\",\n      applicationId: \"KYC-2024-001236\", \n      customerName: \"Priya Sharma\",\n      contactInfo: \"+91-9876543211\",\n      type: \"Individual\",\n      aiScore: 88,\n      submittedAt: \"6 hours ago\"\n    }\n  ];\n\n  const filteredApprovals = pendingApprovals.filter(approval => \n    filterType === \"all\" || approval.type.toLowerCase() === filterType\n  );\n\n  const handleApprove = (applicationId: string, customerName: string) => {\n    toast({\n      title: \"Application Approved\",\n      description: `${customerName}'s application has been approved for activation`,\n    });\n  };\n\n  const handleReject = (applicationId: string, customerName: string) => {\n    toast({\n      title: \"Application Rejected\", \n      description: `${customerName}'s application has been rejected`,\n      variant: \"destructive\",\n    });\n  };\n\n  const handleViewDetails = (applicationId: string) => {\n    toast({\n      title: \"Application Details\",\n      description: `Viewing details for ${applicationId}`,\n    });\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 95) return \"text-success\";\n    if (score >= 85) return \"text-warning\";\n    return \"text-destructive\";\n  };\n\n  const getProgressColor = (score: number) => {\n    if (score >= 95) return \"bg-success\";\n    if (score >= 85) return \"bg-warning\";\n    return \"bg-destructive\";\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg\">Pending Activation Approvals</CardTitle>\n          <div className=\"flex space-x-2\">\n            <Select value={filterType} onValueChange={setFilterType}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue placeholder=\"All Types\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"individual\">Individual</SelectItem>\n                <SelectItem value=\"enterprise\">Enterprise</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button variant=\"ghost\" size=\"sm\">\n              <RefreshCw className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {filteredApprovals.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <CheckCircle className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Pending Approvals</h3>\n            <p className=\"text-gray-500\">All applications have been processed.</p>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-gray-200\">\n                  <th className=\"text-left py-3 text-sm font-medium text-gray-500\">Application ID</th>\n                  <th className=\"text-left py-3 text-sm font-medium text-gray-500\">Customer</th>\n                  <th className=\"text-left py-3 text-sm font-medium text-gray-500\">Type</th>\n                  <th className=\"text-left py-3 text-sm font-medium text-gray-500\">AI Score</th>\n                  <th className=\"text-left py-3 text-sm font-medium text-gray-500\">Submitted</th>\n                  <th className=\"text-left py-3 text-sm font-medium text-gray-500\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredApprovals.map((approval) => (\n                  <tr key={approval.id} className=\"border-b border-gray-100\">\n                    <td className=\"py-3 text-sm font-mono\">{approval.applicationId}</td>\n                    <td className=\"py-3\">\n                      <div>\n                        <p className=\"font-medium text-sm\">{approval.customerName}</p>\n                        <p className=\"text-xs text-gray-500\">{approval.contactInfo}</p>\n                      </div>\n                    </td>\n                    <td className=\"py-3\">\n                      <Badge\n                        variant=\"outline\"\n                        className={\n                          approval.type === \"Individual\"\n                            ? \"border-primary text-primary\"\n                            : \"border-secondary text-secondary\"\n                        }\n                      >\n                        {approval.type}\n                      </Badge>\n                    </td>\n                    <td className=\"py-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-12 h-2 bg-gray-200 rounded-full\">\n                          <div \n                            className={`h-2 rounded-full ${getProgressColor(approval.aiScore)}`}\n                            style={{ width: `${approval.aiScore}%` }}\n                          ></div>\n                        </div>\n                        <span className={`text-sm ${getScoreColor(approval.aiScore)}`}>\n                          {approval.aiScore}%\n                        </span>\n                      </div>\n                    </td>\n                    <td className=\"py-3 text-sm text-gray-500\">{approval.submittedAt}</td>\n                    <td className=\"py-3\">\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleApprove(approval.applicationId, approval.customerName)}\n                          className=\"bg-success hover:bg-success/90\"\n                        >\n                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                          Approve\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => handleReject(approval.applicationId, approval.customerName)}\n                        >\n                          <XCircle className=\"w-3 h-3 mr-1\" />\n                          Reject\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => handleViewDetails(approval.applicationId)}\n                        >\n                          <Eye className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8000},"client/src/components/operator/system-health.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, AlertCircle, XCircle } from \"lucide-react\";\n\ninterface SystemComponent {\n  name: string;\n  status: \"healthy\" | \"degraded\" | \"offline\";\n  description: string;\n}\n\ninterface ApiIntegration {\n  name: string;\n  status: \"connected\" | \"limited\" | \"offline\";\n  description: string;\n}\n\nexport default function SystemHealth() {\n  const systemComponents: SystemComponent[] = [\n    {\n      name: \"AI Processing\",\n      status: \"healthy\",\n      description: \"All AI services operational\"\n    },\n    {\n      name: \"KYC Database\", \n      status: \"healthy\",\n      description: \"Database responding normally\"\n    },\n    {\n      name: \"Face Recognition\",\n      status: \"degraded\",\n      description: \"Experiencing intermittent delays\"\n    },\n    {\n      name: \"Fraud Detection\",\n      status: \"healthy\",\n      description: \"Real-time monitoring active\"\n    }\n  ];\n\n  const apiIntegrations: ApiIntegration[] = [\n    {\n      name: \"DigiLocker API\",\n      status: \"connected\", \n      description: \"Government document verification\"\n    },\n    {\n      name: \"UIDAI Verification\",\n      status: \"connected\",\n      description: \"Aadhaar validation service\"\n    },\n    {\n      name: \"Face Recognition API\", \n      status: \"limited\",\n      description: \"Rate limited - reduced capacity\"\n    },\n    {\n      name: \"SIM Provisioning\",\n      status: \"connected\",\n      description: \"Telecom activation service\"\n    }\n  ];\n\n  const todaySummary = {\n    processed: 1247,\n    autoApproved: 1183,\n    manualReview: 43,\n    rejected: 21,\n    successRate: 94.9\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"healthy\":\n      case \"connected\":\n        return <CheckCircle className=\"w-4 h-4 text-success\" />;\n      case \"degraded\":\n      case \"limited\":\n        return <AlertCircle className=\"w-4 h-4 text-warning\" />;\n      case \"offline\":\n        return <XCircle className=\"w-4 h-4 text-destructive\" />;\n      default:\n        return <AlertCircle className=\"w-4 h-4 text-gray-400\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"healthy\":\n      case \"connected\":\n        return \"text-success\";\n      case \"degraded\":\n      case \"limited\":\n        return \"text-warning\";\n      case \"offline\":\n        return \"text-destructive\";\n      default:\n        return \"text-gray-500\";\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case \"healthy\":\n        return \"Healthy\";\n      case \"connected\":\n        return \"Connected\";\n      case \"degraded\":\n        return \"Degraded\";\n      case \"limited\":\n        return \"Limited\";\n      case \"offline\":\n        return \"Offline\";\n      default:\n        return \"Unknown\";\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* System Health */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">System Health</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {systemComponents.map((component) => (\n              <div key={component.name} className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  {getStatusIcon(component.status)}\n                  <div>\n                    <span className=\"text-sm font-medium\">{component.name}</span>\n                    <p className=\"text-xs text-gray-500\">{component.description}</p>\n                  </div>\n                </div>\n                <Badge\n                  variant=\"outline\"\n                  className={`${getStatusColor(component.status)} border-current`}\n                >\n                  {getStatusText(component.status)}\n                </Badge>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Stats */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Today's Summary</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between text-sm\">\n              <span>Applications Processed</span>\n              <span className=\"font-medium\">{todaySummary.processed.toLocaleString()}</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span>Auto-Approved</span>\n              <span className=\"font-medium text-success\">{todaySummary.autoApproved.toLocaleString()}</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span>Manual Review</span>\n              <span className=\"font-medium text-warning\">{todaySummary.manualReview}</span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span>Rejected</span>\n              <span className=\"font-medium text-destructive\">{todaySummary.rejected}</span>\n            </div>\n            <hr className=\"my-2\" />\n            <div className=\"flex justify-between text-sm font-medium\">\n              <span>Success Rate</span>\n              <span className=\"text-success\">{todaySummary.successRate}%</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* API Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">API Integrations</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {apiIntegrations.map((api) => (\n              <div key={api.name} className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  {getStatusIcon(api.status)}\n                  <div>\n                    <span className=\"text-sm font-medium\">{api.name}</span>\n                    <p className=\"text-xs text-gray-500\">{api.description}</p>\n                  </div>\n                </div>\n                <Badge\n                  variant=\"outline\"\n                  className={`${getStatusColor(api.status)} border-current text-xs`}\n                >\n                  {getStatusText(api.status)}\n                </Badge>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6320},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress-bar.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface Step {\n  step: number;\n  label: string;\n}\n\ninterface ProgressBarProps {\n  steps: Step[];\n  currentStep: number;\n  className?: string;\n}\n\nexport default function ProgressBar({ steps, currentStep, className }: ProgressBarProps) {\n  return (\n    <div className={cn(\"flex items-center justify-between\", className)}>\n      {steps.map((step, index) => (\n        <div key={step.step} className=\"flex items-center\">\n          <div className=\"flex items-center space-x-2\">\n            <div\n              className={cn(\n                \"w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium transition-colors\",\n                currentStep >= step.step\n                  ? \"bg-primary text-white\"\n                  : \"bg-gray-200 text-gray-500\"\n              )}\n            >\n              {step.step}\n            </div>\n            <span\n              className={cn(\n                \"text-sm font-medium transition-colors\",\n                currentStep >= step.step ? \"text-primary\" : \"text-gray-500\"\n              )}\n            >\n              {step.label}\n            </span>\n          </div>\n          {index < steps.length - 1 && (\n            <div\n              className={cn(\n                \"flex-1 h-1 mx-4 rounded transition-colors\",\n                currentStep > step.step ? \"bg-primary\" : \"bg-gray-200\"\n              )}\n            />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1457},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/enterprise/billing-settings-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CreditCard, Settings, X, Check, AlertTriangle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface BillingSettingsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function BillingSettingsModal({ isOpen, onClose }: BillingSettingsModalProps) {\n  const [billingData, setBillingData] = useState({\n    companyName: \"TechCorp Solutions\",\n    billingEmail: \"billing@techcorp.com\",\n    paymentMethod: \"card\",\n    autoRenewal: true,\n    invoiceFrequency: \"monthly\",\n    billingAddress: {\n      street: \"123 Business Center\",\n      city: \"Mumbai\",\n      state: \"Maharashtra\",\n      pincode: \"400001\",\n      gst: \"27AABCU9603R1ZM\"\n    }\n  });\n\n  const { toast } = useToast();\n\n  const currentPlan = {\n    name: \"Enterprise Pro\",\n    price: 799,\n    employees: 45,\n    features: [\"Unlimited Data\", \"Priority Support\", \"Advanced Analytics\"]\n  };\n\n  const invoices = [\n    { id: \"INV-2024-001\", date: \"2024-01-01\", amount: 35955, status: \"paid\" },\n    { id: \"INV-2024-002\", date: \"2024-02-01\", amount: 35955, status: \"paid\" },\n    { id: \"INV-2024-003\", date: \"2024-03-01\", amount: 35955, status: \"pending\" }\n  ];\n\n  const handleSave = () => {\n    toast({\n      title: \"Settings Saved\",\n      description: \"Billing settings have been updated successfully\"\n    });\n  };\n\n  const handleUpdatePayment = () => {\n    toast({\n      title: \"Payment Method Updated\",\n      description: \"Your payment information has been securely updated\"\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"text-2xl flex items-center space-x-2\">\n              <Settings className=\"w-6 h-6 text-primary\" />\n              <span>Billing & Subscription Management</span>\n            </DialogTitle>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Current Plan */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                Current Subscription\n                <Badge variant=\"default\" className=\"bg-success/10 text-success\">Active</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-semibold mb-2\">{currentPlan.name}</h4>\n                  <p className=\"text-3xl font-bold text-primary\">₹{currentPlan.price}<span className=\"text-lg text-gray-500\">/employee/month</span></p>\n                  <p className=\"text-sm text-gray-600 mt-2\">For {currentPlan.employees} employees</p>\n                  <p className=\"text-xl font-bold mt-2\">Total: ₹{currentPlan.price * currentPlan.employees}/month</p>\n                </div>\n                <div>\n                  <h5 className=\"font-medium mb-2\">Plan Features:</h5>\n                  <ul className=\"space-y-1\">\n                    {currentPlan.features.map((feature, index) => (\n                      <li key={index} className=\"flex items-center text-sm\">\n                        <Check className=\"w-4 h-4 text-success mr-2\" />\n                        {feature}\n                      </li>\n                    ))}\n                  </ul>\n                  <Button variant=\"outline\" className=\"mt-4\">Upgrade Plan</Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Payment Method */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <CreditCard className=\"w-5 h-5\" />\n                <span>Payment Method</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <div className=\"border rounded-lg p-4 mb-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <CreditCard className=\"w-6 h-6 text-primary\" />\n                        <div>\n                          <p className=\"font-medium\">•••• •••• •••• 4532</p>\n                          <p className=\"text-sm text-gray-500\">Expires 12/26</p>\n                        </div>\n                      </div>\n                      <Badge variant=\"default\">Primary</Badge>\n                    </div>\n                  </div>\n                  <Button variant=\"outline\" onClick={handleUpdatePayment} className=\"w-full\">\n                    Update Payment Method\n                  </Button>\n                </div>\n                <div>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <Label htmlFor=\"auto-renewal\">Auto Renewal</Label>\n                      <Switch \n                        id=\"auto-renewal\"\n                        checked={billingData.autoRenewal}\n                        onCheckedChange={(checked) => setBillingData({...billingData, autoRenewal: checked})}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"billing-cycle\">Billing Cycle</Label>\n                      <Select value={billingData.invoiceFrequency} onValueChange={(value) => setBillingData({...billingData, invoiceFrequency: value})}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"monthly\">Monthly</SelectItem>\n                          <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                          <SelectItem value=\"annually\">Annually (10% discount)</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Billing Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Billing Information</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"company-name\">Company Name</Label>\n                  <Input \n                    id=\"company-name\"\n                    value={billingData.companyName}\n                    onChange={(e) => setBillingData({...billingData, companyName: e.target.value})}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"billing-email\">Billing Email</Label>\n                  <Input \n                    id=\"billing-email\"\n                    type=\"email\"\n                    value={billingData.billingEmail}\n                    onChange={(e) => setBillingData({...billingData, billingEmail: e.target.value})}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"gst\">GST Number</Label>\n                  <Input \n                    id=\"gst\"\n                    value={billingData.billingAddress.gst}\n                    onChange={(e) => setBillingData({\n                      ...billingData, \n                      billingAddress: {...billingData.billingAddress, gst: e.target.value}\n                    })}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"billing-city\">City</Label>\n                  <Input \n                    id=\"billing-city\"\n                    value={billingData.billingAddress.city}\n                    onChange={(e) => setBillingData({\n                      ...billingData, \n                      billingAddress: {...billingData.billingAddress, city: e.target.value}\n                    })}\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Invoice History */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Invoices</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {invoices.map((invoice) => (\n                  <div key={invoice.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div>\n                      <p className=\"font-medium\">{invoice.id}</p>\n                      <p className=\"text-sm text-gray-500\">{new Date(invoice.date).toLocaleDateString()}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-bold\">₹{invoice.amount.toLocaleString()}</p>\n                      <Badge \n                        variant={invoice.status === 'paid' ? 'default' : 'secondary'}\n                        className={invoice.status === 'paid' ? 'bg-success/10 text-success' : 'bg-warning/10 text-warning'}\n                      >\n                        {invoice.status}\n                      </Badge>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\">Download</Button>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Save Button */}\n          <div className=\"flex justify-end space-x-4\">\n            <Button variant=\"outline\" onClick={onClose}>Cancel</Button>\n            <Button onClick={handleSave}>Save Changes</Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10411},"client/src/components/enterprise/employee-actions-dropdown.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { MoreVertical, Edit, Trash2, Pause, Play, Phone, Mail, Activity } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface EmployeeActionsDropdownProps {\n  employee: any;\n  onAction?: (action: string, employee: any) => void;\n}\n\nexport default function EmployeeActionsDropdown({ employee, onAction }: EmployeeActionsDropdownProps) {\n  const { toast } = useToast();\n\n  const handleAction = (action: string) => {\n    switch (action) {\n      case 'edit':\n        toast({\n          title: \"Edit Employee\",\n          description: `Opening edit form for ${employee.name}`\n        });\n        break;\n      case 'suspend':\n        toast({\n          title: \"Employee Suspended\",\n          description: `${employee.name}'s SIM has been suspended`\n        });\n        break;\n      case 'activate':\n        toast({\n          title: \"Employee Activated\", \n          description: `${employee.name}'s SIM has been activated`\n        });\n        break;\n      case 'call':\n        toast({\n          title: \"Calling Employee\",\n          description: `Initiating call to ${employee.phone || employee.simNumber}`\n        });\n        break;\n      case 'email':\n        toast({\n          title: \"Email Sent\",\n          description: `Email sent to ${employee.email}`\n        });\n        break;\n      case 'usage':\n        toast({\n          title: \"Usage Details\",\n          description: `Viewing detailed usage for ${employee.name}`\n        });\n        break;\n      case 'delete':\n        toast({\n          title: \"Employee Removed\",\n          description: `${employee.name} has been removed from the system`,\n          variant: \"destructive\"\n        });\n        break;\n    }\n    \n    if (onAction) {\n      onAction(action, employee);\n    }\n  };\n\n  const isActive = employee.status === 'active';\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\">\n          <MoreVertical className=\"w-4 h-4\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-48\">\n        <DropdownMenuItem onClick={() => handleAction('edit')}>\n          <Edit className=\"w-4 h-4 mr-2\" />\n          Edit Details\n        </DropdownMenuItem>\n        \n        <DropdownMenuItem onClick={() => handleAction('usage')}>\n          <Activity className=\"w-4 h-4 mr-2\" />\n          View Usage\n        </DropdownMenuItem>\n        \n        <DropdownMenuSeparator />\n        \n        <DropdownMenuItem onClick={() => handleAction('call')}>\n          <Phone className=\"w-4 h-4 mr-2\" />\n          Call Employee\n        </DropdownMenuItem>\n        \n        <DropdownMenuItem onClick={() => handleAction('email')}>\n          <Mail className=\"w-4 h-4 mr-2\" />\n          Send Email\n        </DropdownMenuItem>\n        \n        <DropdownMenuSeparator />\n        \n        {isActive ? (\n          <DropdownMenuItem onClick={() => handleAction('suspend')} className=\"text-warning\">\n            <Pause className=\"w-4 h-4 mr-2\" />\n            Suspend SIM\n          </DropdownMenuItem>\n        ) : (\n          <DropdownMenuItem onClick={() => handleAction('activate')} className=\"text-success\">\n            <Play className=\"w-4 h-4 mr-2\" />\n            Activate SIM\n          </DropdownMenuItem>\n        )}\n        \n        <DropdownMenuSeparator />\n        \n        <DropdownMenuItem onClick={() => handleAction('delete')} className=\"text-destructive\">\n          <Trash2 className=\"w-4 h-4 mr-2\" />\n          Remove Employee\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":3792},"client/src/components/enterprise/usage-analytics-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { BarChart3, TrendingUp, Activity, Wifi, X } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface UsageAnalyticsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function UsageAnalyticsModal({ isOpen, onClose }: UsageAnalyticsModalProps) {\n  const [timeRange, setTimeRange] = useState(\"7d\");\n\n  // Mock data - in real app this would come from API\n  const analytics = {\n    totalEmployees: 45,\n    activeConnections: 42,\n    totalDataUsage: \"1.2TB\",\n    averagePerUser: \"27GB\",\n    topUsers: [\n      { name: \"Rahul Sharma\", usage: \"45GB\", department: \"IT\" },\n      { name: \"Priya Singh\", usage: \"38GB\", department: \"Marketing\" },\n      { name: \"John Smith\", usage: \"35GB\", department: \"Sales\" }\n    ],\n    monthlyTrend: [\n      { month: \"Jan\", usage: 850 },\n      { month: \"Feb\", usage: 920 },\n      { month: \"Mar\", usage: 1100 },\n      { month: \"Apr\", usage: 1200 }\n    ]\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"text-2xl flex items-center space-x-2\">\n              <BarChart3 className=\"w-6 h-6 text-primary\" />\n              <span>Usage Analytics Dashboard</span>\n            </DialogTitle>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Time Range Filter */}\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-semibold\">Analytics Overview</h3>\n            <Select value={timeRange} onValueChange={setTimeRange}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"7d\">Last 7 days</SelectItem>\n                <SelectItem value=\"30d\">Last 30 days</SelectItem>\n                <SelectItem value=\"90d\">Last 3 months</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Key Metrics */}\n          <div className=\"grid md:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <Activity className=\"w-8 h-8 text-primary\" />\n                  <div>\n                    <p className=\"text-2xl font-bold\">{analytics.totalEmployees}</p>\n                    <p className=\"text-sm text-gray-500\">Total Employees</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <Wifi className=\"w-8 h-8 text-success\" />\n                  <div>\n                    <p className=\"text-2xl font-bold\">{analytics.activeConnections}</p>\n                    <p className=\"text-sm text-gray-500\">Active Connections</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <TrendingUp className=\"w-8 h-8 text-secondary\" />\n                  <div>\n                    <p className=\"text-2xl font-bold\">{analytics.totalDataUsage}</p>\n                    <p className=\"text-sm text-gray-500\">Total Data Usage</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <BarChart3 className=\"w-8 h-8 text-warning\" />\n                  <div>\n                    <p className=\"text-2xl font-bold\">{analytics.averagePerUser}</p>\n                    <p className=\"text-sm text-gray-500\">Avg per User</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Usage Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Monthly Usage Trend</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 flex items-end space-x-4\">\n                {analytics.monthlyTrend.map((item, index) => (\n                  <div key={index} className=\"flex-1 flex flex-col items-center\">\n                    <div \n                      className=\"w-full bg-primary rounded-t-lg\"\n                      style={{ height: `${(item.usage / 1200) * 200}px` }}\n                    ></div>\n                    <p className=\"text-sm mt-2\">{item.month}</p>\n                    <p className=\"text-xs text-gray-500\">{item.usage}GB</p>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Top Users */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Top Data Users</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {analytics.topUsers.map((user, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center text-sm\">\n                        {user.name.charAt(0)}\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">{user.name}</p>\n                        <p className=\"text-sm text-gray-500\">{user.department}</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-bold text-primary\">{user.usage}</p>\n                      <p className=\"text-sm text-gray-500\">this month</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Export Options */}\n          <div className=\"flex space-x-4\">\n            <Button variant=\"outline\" className=\"flex-1\">\n              Export PDF Report\n            </Button>\n            <Button variant=\"outline\" className=\"flex-1\">\n              Export CSV Data\n            </Button>\n            <Button className=\"flex-1\">\n              Schedule Reports\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7100},"server/server.ts":{"content":"import express from \"express\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport * as faceapi from \"@vladmandic/face-api\";\nimport canvas from \"canvas\";\n\nconst app = express();\nconst port = 3000;\n\n// Multer storage\nconst upload = multer({ dest: \"uploads/\" });\n\n// Bind face-api.js to node-canvas\nconst { Canvas, Image, ImageData } = canvas as any;\nfaceapi.env.monkeyPatch({ Canvas, Image, ImageData });\n\n// Load models once at startup\nconst MODEL_PATH = path.join(__dirname, \"models\");\nasync function loadModels() {\n  await faceapi.nets.ssdMobilenetv1.loadFromDisk(MODEL_PATH);\n  await faceapi.nets.faceRecognitionNet.loadFromDisk(MODEL_PATH);\n  await faceapi.nets.faceLandmark68Net.loadFromDisk(MODEL_PATH);\n  console.log(\"✅ FaceAPI models loaded!\");\n}\n\n// Utility to compute face descriptor\nasync function getFaceDescriptor(imagePath: string) {\n  const img = await canvas.loadImage(imagePath);\n  const detection = await faceapi\n    .detectSingleFace(img)\n    .withFaceLandmarks()\n    .withFaceDescriptor();\n  if (!detection) throw new Error(\"No face detected in \" + imagePath);\n  return detection.descriptor;\n}\n\n// API endpoint\napp.post(\n  \"/api/face-verification\",\n  upload.fields([\n    { name: \"documentPhoto\", maxCount: 1 },\n    { name: \"selfie\", maxCount: 1 },\n  ]),\n  async (req, res) => {\n    try {\n      if (!req.files)\n        return res.status(400).json({ message: \"No files uploaded\" });\n\n      const files = req.files as { [fieldname: string]: Express.Multer.File[] };\n      const docPath = files[\"documentPhoto\"][0].path;\n      const selfiePath = files[\"selfie\"][0].path;\n\n      const desc1 = await getFaceDescriptor(docPath);\n      const desc2 = await getFaceDescriptor(selfiePath);\n\n      const distance = faceapi.euclideanDistance(desc1, desc2);\n      console.log(\"Similarity distance:\", distance);\n\n      if (distance < 0.6) {\n        res.json({ success: true, message: \"✅ Face verified successfully\" });\n      } else {\n        res.json({ success: false, message: \"❌ Face does not match\" });\n      }\n\n      // cleanup temp files\n      fs.unlinkSync(docPath);\n      fs.unlinkSync(selfiePath);\n    } catch (error: any) {\n      console.error(error);\n      res.status(500).json({ error: error.message });\n    }\n  },\n);\n\nloadModels().then(() => {\n  app.listen(port, () =>\n    console.log(`🚀 Server running on http://localhost:${port}`),\n  );\n});\n","size_bytes":2399}},"version":1}